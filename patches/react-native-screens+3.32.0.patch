diff --git a/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt b/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt
index 1111111..2222222 100644
--- a/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt
+++ b/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt
@@ -1,6 +1,6 @@
 package com.swmansion.rnscreens
 
-import com.facebook.react.BaseReactPackage
+import com.facebook.react.ReactPackage
 import com.facebook.react.bridge.NativeModule
 import com.facebook.react.bridge.ReactApplicationContext
 import com.facebook.react.module.annotations.ReactModuleList
@@ -16,13 +16,13 @@ import com.swmansion.rnscreens.utils.ScreenDummyLayoutHelper
         ScreensModule::class,
     ],
 )
-class RNScreensPackage : BaseReactPackage() {
+class RNScreensPackage : ReactPackage {
     // We just retain it here. This object helps us tackle jumping content when using native header.
     // See: https://github.com/software-mansion/react-native-screens/pull/2169
     private var screenDummyLayoutHelper: ScreenDummyLayoutHelper? = null
 
-    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
+    fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
         // This is the earliest we lay our hands on react context.
         // Moreover this is called before FabricUIManger has finished initializing, not to mention
         // installing its C++ bindings - so we are safe in terms of creating this helper
@@ -42,7 +42,10 @@ class RNScreensPackage : BaseReactPackage() {
         )
     }
 
-    override fun getModule(
+    override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {
+        return listOf(ScreensModule(reactContext))
+    }
+    fun getModule(
         s: String,
         reactApplicationContext: ReactApplicationContext,
     ): NativeModule? {
@@ -52,7 +55,7 @@ class RNScreensPackage : BaseReactPackage() {
         return null
     }
 
-    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {
+    fun getReactModuleInfoProvider(): ReactModuleInfoProvider {
         return ReactModuleInfoProvider {
             val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED
             val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()