import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  RefreshControl,
  Alert,
} from 'react-native';
import { Post, Platform } from '../types';
import { COLORS, FONTS, SPACING, BORDER_RADIUS, PLATFORMS, MOLLY_MESSAGES, BRAND, CARD_THEME, DARK_COLORS } from '../utils/constants';
import { useAppTheme } from '../hooks/useAppTheme';
import Icon from 'react-native-vector-icons/Ionicons';
import MaterialIcon from 'react-native-vector-icons/MaterialIcons';
import { AnimatedCard, SlideInView, FadeInView, ScaleButton } from '../components/AnimationComponents';
import { getSavedContents, SavedContent } from '../utils/storage';
import { APP_TEXT, getText } from '../utils/textConstants';
import dailyTipsService from '../services/dailyTipsService';
import simplePostService from '../services/simplePostService';

interface HomeScreenProps {
  onNavigate: (tab: string, content?: any) => void;
}

const HomeScreen: React.FC<HomeScreenProps> = ({ onNavigate }) => {
  const { colors, cardTheme, isDark } = useAppTheme();
  const [posts, setPosts] = useState<Post[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  const [coachingTip, setCoachingTip] = useState<any>(null);
  const [tipIndex, setTipIndex] = useState(0);

  // 샘플 데이터
  const samplePosts: Post[] = [
    {
      id: '1',
      title: '주말 브런치 후기',
      content: '오늘도 든든한 카페인 충전 ☕ 월요일 아침을 시작하는 나만의 루틴',
      platform: 'instagram',
      status: 'published',
      createdAt: new Date('2024-01-15T10:30:00'),
      updatedAt: new Date('2024-01-15T10:30:00'),
      tags: ['카페', '브런치', '주말'],
      engagement: { likes: 245, comments: 23, shares: 5 },
    },
  ];

  // 사전 정의된 팁 목록
  const predefinedTips = [
    {
      emoji: '💡',
      label: '오늘의 꿀팁',
      value: '자연광 활용',
      subtext: '카페 사진은 자연광이 들어오는 창가에서 찍으면 더 예쁘게 나와요. 오전 10-11시가 가장 좋은 시간대예요!'
    },
    {
      emoji: '📸',
      label: '사진 구도 팁',
      value: '3분할 법칙',
      subtext: '화면을 가로세로 3등분하여 피사체를 교차점에 배치하면 안정적인 구도가 완성돼요!'
    },
    {
      emoji: '✍️',
      label: '글쓰기 팁',
      value: '첫 문장이 중요해요',
      subtext: '질문이나 공감대를 형성하는 문장으로 시작하면 독자의 관심을 끌 수 있어요!'
    },
    {
      emoji: '🎨',
      label: '색감 조정 팁',
      value: '통일감 있는 피드',
      subtext: '비슷한 톤과 필터를 사용하면 전체적으로 조화로운 피드를 만들 수 있어요!'
    },
    {
      emoji: '⏰',
      label: '포스팅 시간 팁',
      value: '점심시간 활용',
      subtext: '12시-1시 사이는 많은 사람들이 휴식하며 SNS를 보는 시간이에요!'
    },
    {
      emoji: '💬',
      label: '소통 팁',
      value: '댓글에 답글 달기',
      subtext: '팔로워의 댓글에 진심 어린 답글을 달면 친밀감이 높아져요!'
    },
    {
      emoji: '🏷️',
      label: '해시태그 팁',
      value: '적절한 개수 사용',
      subtext: '인스타그램은 5-10개, 트위터는 2-3개가 적당해요. 너무 많으면 스팸으로 보일 수 있어요!'
    }
  ];

  // 오늘의 꿀팁 가져오기
  const loadCoachingTip = () => {
    // 현재 인덱스의 팁을 설정
    setCoachingTip(predefinedTips[tipIndex]);
    // 다음 인덱스 준비 (순환)
    setTipIndex((prevIndex) => (prevIndex + 1) % predefinedTips.length);
  };

  useEffect(() => {
    setPosts(samplePosts);
    loadCoachingTip();
  }, []);

  const onRefresh = async () => {
    setRefreshing(true);
    try {
      setPosts(samplePosts);
      loadCoachingTip();
    } catch (error) {
      console.error('Failed to refresh:', error);
    } finally {
      setRefreshing(false);
    }
  };

  const handleQuickAction = (action: string) => {
    switch (action) {
      case APP_TEXT.home.quickActions.writePost:
        onNavigate('ai-write');
        break;
      case APP_TEXT.home.quickActions.analyzePhoto:
        onNavigate('ai-write', { initialMode: 'photo' });
        break;
      case '문장 정리하기':
        onNavigate('ai-write', { initialMode: 'polish' });
        break;
      case '내 스타일':
        onNavigate('my-style');
        break;
      case '템플릿':
        // 템플릿 화면이 없으므로 AI 글쓰기로 이동
        onNavigate('ai-write');
        break;
      case '트렌드':
        onNavigate('trend');
        break;
      case '광고 테스트':
        onNavigate('feed-ads');
        break;
      case '구독':
        onNavigate('subscription');
        break;
      default:
        break;
    }
  };

  const styles = createStyles(colors, cardTheme);

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView
        style={styles.content}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        showsVerticalScrollIndicator={false}
      >
        {/* 헤더 섹션 */}
        <FadeInView delay={0} duration={250}>
          <View style={styles.headerSection}>
            <View style={styles.headerContent}>
              <View style={styles.logoContainer}>
                <View style={styles.logoCircle}>
                  <Text style={styles.mollyIcon}>{APP_TEXT.brand.characterName.charAt(0)}</Text>
                </View>
                <View>
                  <Text style={styles.appTitle}>{BRAND.name}</Text>
                  <Text style={styles.appSubtitle}>{BRAND.tagline}</Text>
                </View>
              </View>
            </View>
          </View>
        </FadeInView>

        {/* Molly 인사 배너 */}
        <FadeInView delay={50} duration={200}>
          <View style={styles.mollyBanner}>
            <View style={styles.mollyAvatar}>
              <Text style={styles.mollyAvatarText}>👋</Text>
            </View>
            <View style={styles.mollyBannerContent}>
              <Text style={styles.mollyBannerTitle}>{APP_TEXT.home.header.greeting}</Text>
              <Text style={styles.mollyBannerSubtitle}>{APP_TEXT.home.header.subtitle}</Text>
            </View>
          </View>
        </FadeInView>

        {/* 빠른 생성 */}
        <FadeInView delay={175}>
          <View style={styles.quickActions}>
            <Text style={styles.sectionTitle}>{APP_TEXT.home.quickActions.title}</Text>
            <View style={styles.mainActions}>
              <ScaleButton 
                style={styles.mainActionCard}
                onPress={() => handleQuickAction(APP_TEXT.home.quickActions.writePost)}
              >
                <View style={styles.mainActionRow}>
                  <View style={styles.mainActionIcon}>
                  <MaterialIcon name="edit" size={24} color={colors.white} />
                  </View>
                  <View style={styles.mainActionTextContainer}>
                    <Text style={styles.mainActionTitle}>{APP_TEXT.home.quickActions.writePost}</Text>
                    <Text style={styles.mainActionDesc}>{APP_TEXT.home.quickActions.writePostDesc}</Text>
                  </View>
                </View>
              </ScaleButton>

              {/* 문장 정리하기 - 새로 추가 */}
              <ScaleButton 
                style={styles.mainActionCard}
                onPress={() => handleQuickAction('문장 정리하기')}
              >
                <View style={styles.mainActionRow}>
                  <View style={[styles.mainActionIcon, { backgroundColor: '#9C27B0' }]}>
                    <MaterialIcon name="auto-fix-high" size={24} color={colors.white} />
                  </View>
                  <View style={styles.mainActionTextContainer}>
                    <Text style={styles.mainActionTitle}>문장 정리하기</Text>
                    <Text style={styles.mainActionDesc}>작성한 글을 더 멋지게 다듬어드려요</Text>
                  </View>
                </View>
              </ScaleButton>

              <ScaleButton 
                style={styles.mainActionCard}
                onPress={() => handleQuickAction(APP_TEXT.home.quickActions.analyzePhoto)}
              >
                <View style={styles.mainActionRow}>
                  <View style={[styles.mainActionIcon, { backgroundColor: '#E91E63' }]}>
                  <MaterialIcon name="image" size={24} color={colors.white} />
                  </View>
                  <View style={styles.mainActionTextContainer}>
                    <Text style={styles.mainActionTitle}>{APP_TEXT.home.quickActions.analyzePhoto}</Text>
                    <Text style={styles.mainActionDesc}>{APP_TEXT.home.quickActions.analyzePhotoDesc}</Text>
                  </View>
                </View>
              </ScaleButton>
            </View>

            {/* 보조 기능들 */}
            <View style={styles.subActions}>
              {/* 개발 환경에서만 표시 - 출시 시 주석 처리 */}
              {__DEV__ && (
                <AnimatedCard delay={400} style={styles.subActionCard}>
                  <TouchableOpacity 
                    style={styles.subActionContent}
                    onPress={() => handleQuickAction('광고 테스트')}
                  >
                    <MaterialIcon name="monetization-on" size={20} color={colors.text.secondary} />
                    <Text style={styles.subActionText}>광고 테스트</Text>
                  </TouchableOpacity>
                </AnimatedCard>
              )}
              
              {/* 구독 버튼 - 항상 표시 */}
              <AnimatedCard delay={__DEV__ ? 450 : 400} style={[styles.subActionCard, !__DEV__ && styles.subscriptionCardFull]}>
                <TouchableOpacity 
                  style={styles.subActionContent}
                  onPress={() => handleQuickAction('구독')}
                >
                  <MaterialIcon name="workspace-premium" size={20} color={colors.text.secondary} />
                  <Text style={styles.subActionText}>구독</Text>
                </TouchableOpacity>
              </AnimatedCard>
            </View>
          </View>
        </FadeInView>

        {/* 포스티의 특별 조언 */}
        <SlideInView direction="left" delay={550}>
          <View style={styles.coachingSection}>
            <Text style={styles.sectionTitle}>포스티의 특별 조언</Text>
            
            <View style={styles.coachingCard}>
              <View style={styles.coachingIconContainer}>
                <MaterialIcon name="tips-and-updates" size={24} color={colors.white} />
              </View>
              <View style={styles.coachingContent}>
                <Text style={styles.coachingTitle}>
                  {coachingTip ? `${coachingTip.emoji} ${coachingTip.label}` : '💡 오늘의 꿀팁'}
                </Text>
                <Text style={styles.coachingText}>
                  {coachingTip ? 
                    (coachingTip.value.includes('\n') ? 
                      `${coachingTip.value.replace('\n', ' ')} - ${coachingTip.subtext}` : 
                      `${coachingTip.value}! ${coachingTip.subtext}`
                    ) : 
                    '카페 사진은 자연광이 들어오는 창가에서 찍으면 더 예쁘게 나와요. 오전 10-11시가 가장 좋은 시간대예요!'
                  }
                </Text>
              </View>
            </View>
          </View>
        </SlideInView>

        {/* 오늘의 트렌드 - 간단한 해시태그 추천 */}
        <SlideInView direction="left" delay={600}>
          <View style={styles.trendSection}>
            <Text style={styles.sectionTitle}>오늘의 추천 해시태그</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.hashtagScroll}>
              {['일상', '주말', '카페', '맛집', '여행', '운동', '책스타그램'].map((tag, index) => (
                <TouchableOpacity
                  key={tag}
                  style={styles.hashtagChip}
                  onPress={() => onNavigate('ai-write', { content: `#${tag} `, hashtags: [tag] })}
                  activeOpacity={0.7}
                >
                  <Text style={styles.hashtagText}>#{tag}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </SlideInView>

        {/* 포스티의 맞춤 추천 */}
        <SlideInView direction="right" delay={650}>
          <View style={styles.todaySection}>
            <View style={styles.sectionHeader}>
              <Text style={styles.sectionTitle}>{APP_TEXT.brand.characterNameKo}의 맞춤 추천</Text>
            </View>
            
            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.recommendScroll}>
              {/* 일정 기반 추천 */}
              <AnimatedCard delay={700} style={styles.recommendCard}>
                <View style={styles.recommendIconContainer}>
                  <MaterialIcon name="event" size={24} color={colors.white} />
                </View>
                <View style={styles.recommendBadge}>
                  <Text style={styles.recommendBadgeText}>📅 오늘의 일정</Text>
                </View>
                <Text style={styles.recommendTitle}>"팀 미팅" 후기 작성하기</Text>
                <Text style={styles.recommendContent}>
                  오늘 오후 2시에 있었던 팀 미팅,{"\n"}어떤 인사이트를 얻으셨나요?
                </Text>
                <View style={styles.recommendFooter}>
                  <View style={styles.recommendMeta}>
                    <Icon name="time-outline" size={14} color={colors.text.secondary} />
                    <Text style={styles.recommendMetaText}>2시간 전 일정</Text>
                  </View>
                  <ScaleButton 
                    style={styles.writeButton}
                    onPress={() => {
                      onNavigate('ai-write', {
                        prompt: '오늘 팀 미팅에서 얻은 인사이트',
                        category: 'professional'
                      });
                    }}
                  >
                    <Text style={styles.writeButtonText}>글쓰기</Text>
                  </ScaleButton>
                </View>
              </AnimatedCard>

              {/* 사진 기반 추천 */}
              <AnimatedCard delay={750} style={[styles.recommendCard, { marginLeft: SPACING.sm }]}>
                <View style={[styles.recommendIconContainer, { backgroundColor: '#E91E63' }]}>
                  <MaterialIcon name="photo-library" size={24} color={colors.white} />
                </View>
                <View style={styles.recommendBadge}>
                  <Text style={styles.recommendBadgeText}>📸 최근 사진</Text>
                </View>
                <Text style={styles.recommendTitle}>어제 찍은 카페 사진</Text>
                <Text style={styles.recommendContent}>
                  갤러리에 있는 카페 사진으로{"\n"}감성 가득한 포스팅을 만들어보세요!
                </Text>
                <View style={styles.recommendFooter}>
                  <View style={styles.recommendMeta}>
                    <Icon name="image" size={14} color={colors.text.secondary} />
                    <Text style={styles.recommendMetaText}>3장의 사진</Text>
                  </View>
                  <ScaleButton 
                    style={styles.writeButton}
                    onPress={() => {
                      onNavigate('ai-write', {
                        mode: 'photo',
                        prompt: '카페 분위기와 메뉴 소개'
                      });
                    }}
                  >
                    <Text style={styles.writeButtonText}>글쓰기</Text>
                  </ScaleButton>
                </View>
              </AnimatedCard>

              {/* 시간대 기반 추천 */}
              <AnimatedCard delay={800} style={[styles.recommendCard, { marginLeft: SPACING.sm }]}>
                <View style={[styles.recommendIconContainer, { backgroundColor: '#2196F3' }]}>
                  <MaterialIcon name="access-time" size={24} color={colors.white} />
                </View>
                <View style={styles.recommendBadge}>
                  <Text style={styles.recommendBadgeText}>⏰ 활동 시간</Text>
                </View>
                <Text style={styles.recommendTitle}>저녁 7시 황금 시간대!</Text>
                <Text style={styles.recommendContent}>
                  지금이 가장 많은 사람들이{"\n"}활동하는 시간이에요. 포스팅 해볼까요?
                </Text>
                <View style={styles.recommendFooter}>
                  <View style={styles.recommendMeta}>
                    <Icon name="trending-up" size={14} color={colors.text.secondary} />
                    <Text style={styles.recommendMetaText}>참여율 높음</Text>
                  </View>
                  <ScaleButton 
                    style={styles.writeButton}
                    onPress={() => {
                      onNavigate('ai-write');
                    }}
                  >
                    <Text style={styles.writeButtonText}>글쓰기</Text>
                  </ScaleButton>
                </View>
              </AnimatedCard>
            </ScrollView>
          </View>
        </SlideInView>

        <View style={styles.bottomSpace} />
      </ScrollView>
    </SafeAreaView>
  );
};

const createStyles = (colors: typeof COLORS, cardTheme: typeof CARD_THEME) => {
  const isDark = colors.background === '#1A202C'; // 다크모드 체크
  
  return StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  content: {
    flex: 1,
  },
  headerSection: {
    backgroundColor: colors.primary,
    paddingBottom: 100,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.lg,
    paddingTop: SPACING.md,
  },
  logoContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  logoCircle: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: 'rgba(255,255,255,0.25)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.sm,
  },
  mollyIcon: {
    fontSize: 24,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  appTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#FFFFFF',
    letterSpacing: -0.5,
  },
  appSubtitle: {
    fontSize: 14,
    color: 'rgba(255,255,255,0.85)',
    marginTop: 2,
  },
  headerButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(255,255,255,0.25)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  // Molly 배너
  mollyBanner: {
    backgroundColor: cardTheme.molly.background,
    marginHorizontal: SPACING.lg,
    marginTop: -70,
    borderRadius: 16,
    padding: SPACING.lg,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: colors.primary,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: isDark ? 0.3 : 0.15,
    shadowRadius: 12,
    elevation: 8,
  },
  mollyAvatar: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.md,
  },
  mollyAvatarText: {
    fontSize: 28,
    color: colors.white,
  },
  mollyBannerContent: {
    flex: 1,
  },
  mollyBannerTitle: {
    fontSize: 16,
    fontWeight: '700',
    color: colors.primary,
    letterSpacing: -0.3,
  },
  mollyBannerSubtitle: {
    fontSize: 14,
    color: colors.text.primary,
    marginTop: 4,
    fontWeight: '500',
  },
  // 빠른 생성
  quickActions: {
    paddingHorizontal: SPACING.lg,
    marginTop: SPACING.xl,
  },
  mainActions: {
    gap: SPACING.sm,
    marginBottom: SPACING.md,
  },
  // 기존 스타일 (2줄 버전)
  mainActionCard: {
    backgroundColor: colors.surface,
    borderRadius: 12,
    paddingVertical: 20,
    paddingHorizontal: 20,
    marginBottom: 12,
    ...cardTheme.default.shadow,
  },
  mainActionRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  mainActionIcon: {
    width: 44,
    height: 44,
    borderRadius: 12,
    backgroundColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  mainActionTextContainer: {
    flex: 1,
  },
  mainActionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text.primary,
    marginBottom: 3,
    includeFontPadding: false,
    lineHeight: 20,
  },
  mainActionDesc: {
    fontSize: 14,
    color: colors.text.secondary,
    includeFontPadding: false,
    lineHeight: 18,
  },
  subActions: {
    flexDirection: 'row',
    gap: SPACING.sm,
  },
  subActionCard: {
    flex: 1,
    backgroundColor: colors.lightGray,
    borderRadius: 12,
  },
  subActionContent: {
    paddingVertical: SPACING.md,
    alignItems: 'center',
    gap: SPACING.xs,
  },
  subActionText: {
    fontSize: 13,
    fontWeight: '500',
    color: colors.text.secondary,
  },

  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.md,
    paddingHorizontal: SPACING.lg,
  },
  refreshText: {
    fontSize: 14,
    color: colors.primary,
    fontWeight: '500',
  },
  moreText: {
    fontSize: 14,
    color: colors.primary,
    fontWeight: '500',
  },
  // AI 코칭
  coachingSection: {
    paddingHorizontal: SPACING.lg,
    marginTop: SPACING.xl,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.text.primary,
    marginBottom: SPACING.md,
    letterSpacing: -0.3,
  },
  coachingCard: {
    backgroundColor: cardTheme.molly.background,
    borderRadius: 16,
    padding: SPACING.lg,
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  coachingIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.md,
  },
  coachingContent: {
    flex: 1,
  },
  coachingTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: cardTheme.molly.titleColor,
    marginBottom: SPACING.xs,
  },
  coachingText: {
    fontSize: 14,
    color: cardTheme.molly.textColor,
    lineHeight: 20,
  },
  // 추천 섹션
  todaySection: {
    marginTop: SPACING.xl,
  },
  recommendScroll: {
    paddingLeft: SPACING.lg,
  },
  recommendCard: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: SPACING.lg,
    width: 280,
    ...cardTheme.default.shadow,
  },
  recommendIconContainer: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  recommendTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text.primary,
    marginBottom: SPACING.xs,
  },
  recommendBadge: {
    backgroundColor: colors.lightGray,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
    alignSelf: 'flex-start',
    marginBottom: SPACING.sm,
  },
  recommendBadgeText: {
    fontSize: 12,
    fontWeight: '500',
    color: colors.text.secondary,
  },
  personalizedBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.primary + '15',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
    marginBottom: SPACING.xs,
    gap: 4,
  },
  personalizedText: {
    fontSize: 11,
    color: colors.primary,
    fontWeight: '500',
  },
  recommendContent: {
    fontSize: 14,
    color: colors.text.primary,
    lineHeight: 22,
    marginBottom: SPACING.sm,
  },
  recommendHashtags: {
    flexDirection: 'row',
    marginBottom: SPACING.md,
  },
  recommendHashtag: {
    fontSize: 12,
    color: colors.primary,
    marginRight: SPACING.xs,
  },
  recommendFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  recommendMeta: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: SPACING.xs,
  },
  recommendMetaText: {
    fontSize: 12,
    color: colors.text.tertiary,
  },
  writeButton: {
    backgroundColor: colors.primary,
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 24,
  },
  writeButtonText: {
    color: cardTheme.molly.button.text,
    fontSize: 14,
    fontWeight: '600',
    letterSpacing: -0.2,
  },
  bottomSpace: {
    height: SPACING.xxl,
  },
  subscriptionCardFull: {
    flex: 1,
  },
  trendSection: {
    marginBottom: SPACING.xl,
    paddingHorizontal: SPACING.lg,
  },
  hashtagScroll: {
    marginTop: SPACING.sm,
  },
  hashtagChip: {
    backgroundColor: colors.surface,
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.sm,
    borderRadius: 20,
    marginRight: SPACING.sm,
    borderWidth: 1,
    borderColor: colors.border,
  },
  hashtagText: {
    fontSize: 14,
    color: colors.text.primary,
    fontWeight: '500',
  },
  });
};

export default HomeScreen;
