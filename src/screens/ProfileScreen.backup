import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
} from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import MaterialIcon from 'react-native-vector-icons/MaterialIcons';
import { COLORS, SPACING, BORDER_RADIUS, FONT_SIZES } from '../utils/constants';
import { useAppTheme } from '../hooks/useAppTheme';
import { storage } from '../utils/storage';
import { User } from '../types';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface ProfileScreenProps {
  onBack?: () => void;
  onNavigate?: (screen: string, data?: any) => void;
}

const ProfileScreen: React.FC<ProfileScreenProps> = ({ onBack, onNavigate }) => {
  const { colors, cardTheme } = useAppTheme();
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    todayGenerated: 0,
    weeklyGenerated: 0,
    monthlyGenerated: 0,
    totalSaved: 0,
    aiCreditsRemaining: 10,
    aiCreditsTotal: 10,
    connectedPlatforms: 0,
  });
  const [subscriptionPlan, setSubscriptionPlan] = useState('free');

  const styles = createStyles(colors, cardTheme);

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      setLoading(true);
      
      // 사용자 정보 로드
      const userData = await storage.getUser();
      setUser(userData);
      
      // 통계 데이터 로드
      await loadStats(userData);
      
      // 구독 정보 로드
      const plan = await AsyncStorage.getItem('subscription_plan');
      setSubscriptionPlan(plan || 'free');
      
    } catch (error) {
      console.error('Failed to load user data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async (userData: User | null) => {
    const today = new Date().toDateString();
    const todayStats = await AsyncStorage.getItem(`stats_${today}`);
    const parsedStats = todayStats ? JSON.parse(todayStats) : { generated: 0 };
    
    const creditsTotal = subscriptionPlan === 'pro' ? 999 : subscriptionPlan === 'premium' ? 50 : 10;
    const creditsRemaining = subscriptionPlan === 'pro' ? 999 : subscriptionPlan === 'premium' ? 50 - parsedStats.generated : 10 - parsedStats.generated;
    
    setStats({
      todayGenerated: parsedStats.generated || 3,
      weeklyGenerated: 18,
      monthlyGenerated: 127,
      totalSaved: 45,
      aiCreditsRemaining: Math.max(0, creditsRemaining),
      aiCreditsTotal: creditsTotal,
      connectedPlatforms: userData?.connectedPlatforms?.length || 0,
    });
  };

  const handleUpgradePlan = () => {
    Alert.alert(
      'Posty Pro 업그레이드',
      '무제한 AI 크레딧과 고급 분석 기능을 사용해보세요!',
      [
        { text: '나중에', style: 'cancel' },
        { 
          text: '업그레이드', 
          onPress: () => {
            if (onNavigate) {
              onNavigate('subscription');
            }
          }
        },
      ]
    );
  };

  const handleDeleteAllData = () => {
    Alert.alert(
      '모든 데이터 삭제',
      '정말 모든 데이터를 삭제하시겠어요?\n이 작업은 되돌릴 수 없습니다.',
      [
        { text: '취소', style: 'cancel' },
        {
          text: '삭제',
          style: 'destructive',
          onPress: async () => {
            try {
              // 모든 AsyncStorage 데이터 삭제
              const keys = await AsyncStorage.getAllKeys();
              await AsyncStorage.multiRemove(keys);
              
              Alert.alert(
                '완료',
                '모든 데이터가 삭제되었습니다.',
                [{ text: '확인', onPress: () => loadUserData() }]
              );
            } catch (error) {
              Alert.alert('오류', '데이터 삭제에 실패했습니다.');
            }
          },
        },
      ]
    );
  };

  const handleClearHistory = () => {
    Alert.alert(
      '히스토리 삭제',
      '생성 및 활동 기록을 모두 삭제하시겠어요?',
      [
        { text: '취소', style: 'cancel' },
        {
          text: '삭제',
          style: 'destructive',
          onPress: async () => {
            try {
              // 히스토리 관련 데이터만 삭제
              const keys = await AsyncStorage.getAllKeys();
              const historyKeys = keys.filter(key => 
                key.includes('stats_') || 
                key.includes('history_') || 
                key.includes('activity_')
              );
              await AsyncStorage.multiRemove(historyKeys);
              
              Alert.alert('완료', '히스토리가 삭제되었습니다.');
              loadUserData();
            } catch (error) {
              Alert.alert('오류', '히스토리 삭제에 실패했습니다.');
            }
          },
        },
      ]
    );
  };

  const getSubscriptionBadge = () => {
    switch (subscriptionPlan) {
      case 'pro':
        return { text: 'PRO', color: '#8B5CF6', icon: 'crown' };
      case 'premium':
        return { text: 'PREMIUM', color: '#F59E0B', icon: 'star' };
      default:
        return { text: 'FREE', color: colors.text.secondary, icon: 'person' };
    }
  };

  const planBadge = getSubscriptionBadge();

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.primary} />
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* 헤더 */}
      <View style={styles.header}>
        <TouchableOpacity onPress={onBack} style={styles.backButton}>
          <Icon name="chevron-back" size={24} color={colors.text.primary} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>프로필</Text>
        <View style={{ width: 40 }} />
      </View>

      <ScrollView showsVerticalScrollIndicator={false}>
        {/* 프로필 섹션 */}
        <View style={styles.profileSection}>
          <View style={styles.profileAvatar}>
            <Text style={styles.profileInitial}>
              {user?.name?.charAt(0) || 'P'}
            </Text>
          </View>
          <Text style={styles.userName}>{user?.name || '포스티'}</Text>
          <Text style={styles.userEmail}>{user?.email || 'posty@example.com'}</Text>
          
          <View style={styles.planBadgeContainer}>
            <MaterialIcon name={planBadge.icon} size={16} color={planBadge.color} />
            <Text style={[styles.planBadgeText, { color: planBadge.color }]}>
              {planBadge.text}
            </Text>
          </View>
        </View>

        {/* AI 크레딧 섹션 */}
        <View style={styles.creditCard}>
          <View style={styles.creditHeader}>
            <View style={styles.creditTitleRow}>
              <Icon name="sparkles" size={20} color="#8B5CF6" />
              <Text style={styles.creditTitle}>오늘의 AI 크레딧</Text>
            </View>
            <Text style={styles.creditCount}>
              {subscriptionPlan === 'pro' ? '무제한' : `${stats.aiCreditsRemaining}/${stats.aiCreditsTotal}`}
            </Text>
          </View>
          
          {subscriptionPlan !== 'pro' && (
            <>
              <View style={styles.creditProgressBar}>
                <View 
                  style={[
                    styles.creditProgressFill, 
                    { width: `${(stats.aiCreditsRemaining / stats.aiCreditsTotal) * 100}%` }
                  ]} 
                />
              </View>
              
              {subscriptionPlan === 'free' && stats.aiCreditsRemaining === 0 && (
                <TouchableOpacity 
                  style={styles.upgradePrompt}
                  onPress={handleUpgradePlan}
                >
                  <Text style={styles.upgradePromptText}>
                    오늘의 크레딧을 모두 사용했어요. 업그레이드하고 더 만들어보세요!
                  </Text>
                  <Icon name="arrow-forward" size={16} color={colors.primary} />
                </TouchableOpacity>
              )}
            </>
          )}
        </View>

        {/* 통계 섹션 */}
        <View style={styles.statsSection}>
          <Text style={styles.sectionTitle}>사용 통계</Text>
          
          <View style={styles.statsGrid}>
            <View style={styles.statItem}>
              <View style={[styles.statIcon, { backgroundColor: '#10B981' + '20' }]}>
                <Icon name="today" size={24} color="#10B981" />
              </View>
              <Text style={styles.statValue}>{stats.todayGenerated}</Text>
              <Text style={styles.statLabel}>오늘 생성</Text>
            </View>
            
            <View style={styles.statItem}>
              <View style={[styles.statIcon, { backgroundColor: '#F59E0B' + '20' }]}>
                <Icon name="calendar" size={24} color="#F59E0B" />
              </View>
              <Text style={styles.statValue}>{stats.weeklyGenerated}</Text>
              <Text style={styles.statLabel}>이번 주</Text>
            </View>
            
            <View style={styles.statItem}>
              <View style={[styles.statIcon, { backgroundColor: '#8B5CF6' + '20' }]}>
                <Icon name="bookmark" size={24} color="#8B5CF6" />
              </View>
              <Text style={styles.statValue}>{stats.totalSaved}</Text>
              <Text style={styles.statLabel}>저장됨</Text>
            </View>
            
            <View style={styles.statItem}>
              <View style={[styles.statIcon, { backgroundColor: colors.primary + '20' }]}>
                <Icon name="share-social" size={24} color={colors.primary} />
              </View>
              <Text style={styles.statValue}>{stats.connectedPlatforms}</Text>
              <Text style={styles.statLabel}>연결된 SNS</Text>
            </View>
          </View>
        </View>

        {/* 메뉴 섹션 */}
        <View style={styles.menuSection}>
          <TouchableOpacity 
            style={styles.menuItem}
            onPress={() => onNavigate?.('settings')}
          >
            <View style={styles.menuIconContainer}>
              <Icon name="settings-outline" size={20} color={colors.text.secondary} />
            </View>
            <Text style={styles.menuTitle}>설정</Text>
            <Icon name="chevron-forward" size={20} color={colors.text.tertiary} />
          </TouchableOpacity>

          {subscriptionPlan === 'free' && (
            <TouchableOpacity 
              style={styles.menuItem}
              onPress={handleUpgradePlan}
            >
              <View style={styles.menuIconContainer}>
                <Icon name="rocket-outline" size={20} color="#8B5CF6" />
              </View>
              <Text style={styles.menuTitle}>Posty Pro 업그레이드</Text>
              <Icon name="chevron-forward" size={20} color={colors.text.tertiary} />
            </TouchableOpacity>
          )}

          <TouchableOpacity 
            style={styles.menuItem}
            onPress={handleClearHistory}
          >
            <View style={styles.menuIconContainer}>
              <Icon name="time-outline" size={20} color={colors.text.secondary} />
            </View>
            <Text style={styles.menuTitle}>히스토리 삭제</Text>
            <Icon name="chevron-forward" size={20} color={colors.text.tertiary} />
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.menuItem, styles.dangerMenuItem]}
            onPress={handleDeleteAllData}
          >
            <View style={styles.menuIconContainer}>
              <Icon name="trash-outline" size={20} color="#EF4444" />
            </View>
            <Text style={[styles.menuTitle, { color: '#EF4444' }]}>
              모든 데이터 삭제
            </Text>
            <Icon name="chevron-forward" size={20} color="#EF4444" />
          </TouchableOpacity>
        </View>

        {/* 정보 섹션 */}
        <View style={styles.infoSection}>
          <Text style={styles.versionText}>Posty v1.0.0</Text>
          <Text style={styles.copyrightText}>© 2024 Posty AI</Text>
        </View>

        <View style={styles.bottomSpace} />
      </ScrollView>
    </SafeAreaView>
  );
};

const createStyles = (colors: typeof COLORS, cardTheme: any) => {
  const isDark = colors.background === '#1A202C';

  return StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    loadingContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
    },
    header: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: SPACING.lg,
      paddingVertical: SPACING.md,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
    },
    backButton: {
      width: 40,
      height: 40,
      justifyContent: 'center',
      alignItems: 'center',
    },
    headerTitle: {
      fontSize: 18,
      fontWeight: '600',
      color: colors.text.primary,
    },
    profileSection: {
      alignItems: 'center',
      paddingVertical: SPACING.xl,
    },
    profileAvatar: {
      width: 80,
      height: 80,
      borderRadius: 40,
      backgroundColor: colors.primary,
      justifyContent: 'center',
      alignItems: 'center',
      marginBottom: SPACING.md,
    },
    profileInitial: {
      fontSize: 32,
      fontWeight: '700',
      color: colors.white,
    },
    userName: {
      fontSize: 20,
      fontWeight: '600',
      color: colors.text.primary,
      marginBottom: 4,
    },
    userEmail: {
      fontSize: FONT_SIZES.medium,
      color: colors.text.secondary,
      marginBottom: SPACING.md,
    },
    planBadgeContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      gap: 6,
      backgroundColor: colors.surface,
      paddingHorizontal: SPACING.md,
      paddingVertical: 6,
      borderRadius: BORDER_RADIUS.full,
    },
    planBadgeText: {
      fontSize: FONT_SIZES.small,
      fontWeight: '600',
    },
    creditCard: {
      marginHorizontal: SPACING.lg,
      padding: SPACING.lg,
      backgroundColor: colors.surface,
      borderRadius: BORDER_RADIUS.lg,
      marginBottom: SPACING.lg,
    },
    creditHeader: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: SPACING.md,
    },
    creditTitleRow: {
      flexDirection: 'row',
      alignItems: 'center',
      gap: SPACING.sm,
    },
    creditTitle: {
      fontSize: 16,
      fontWeight: '600',
      color: colors.text.primary,
    },
    creditCount: {
      fontSize: 20,
      fontWeight: '700',
      color: '#8B5CF6',
    },
    creditProgressBar: {
      height: 8,
      backgroundColor: colors.lightGray,
      borderRadius: 4,
      overflow: 'hidden',
    },
    creditProgressFill: {
      height: '100%',
      backgroundColor: '#8B5CF6',
      borderRadius: 4,
    },
    upgradePrompt: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      marginTop: SPACING.md,
      padding: SPACING.sm,
      backgroundColor: colors.primary + '10',
      borderRadius: BORDER_RADIUS.sm,
    },
    upgradePromptText: {
      flex: 1,
      fontSize: FONT_SIZES.small,
      color: colors.primary,
      marginRight: SPACING.sm,
    },
    statsSection: {
      paddingHorizontal: SPACING.lg,
      marginBottom: SPACING.lg,
    },
    sectionTitle: {
      fontSize: 16,
      fontWeight: '600',
      color: colors.text.primary,
      marginBottom: SPACING.md,
    },
    statsGrid: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      gap: SPACING.md,
    },
    statItem: {
      flex: 1,
      minWidth: '45%',
      backgroundColor: colors.surface,
      padding: SPACING.lg,
      borderRadius: BORDER_RADIUS.lg,
      alignItems: 'center',
    },
    statIcon: {
      width: 48,
      height: 48,
      borderRadius: 24,
      justifyContent: 'center',
      alignItems: 'center',
      marginBottom: SPACING.sm,
    },
    statValue: {
      fontSize: 24,
      fontWeight: '700',
      color: colors.text.primary,
      marginBottom: 4,
    },
    statLabel: {
      fontSize: FONT_SIZES.small,
      color: colors.text.secondary,
    },
    menuSection: {
      paddingHorizontal: SPACING.lg,
      marginBottom: SPACING.lg,
    },
    menuItem: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.surface,
      padding: SPACING.md,
      borderRadius: BORDER_RADIUS.md,
      marginBottom: SPACING.sm,
    },
    dangerMenuItem: {
      borderWidth: 1,
      borderColor: '#EF4444' + '30',
    },
    menuIconContainer: {
      width: 40,
      height: 40,
      borderRadius: 20,
      backgroundColor: colors.lightGray,
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: SPACING.md,
    },
    menuTitle: {
      flex: 1,
      fontSize: FONT_SIZES.medium,
      fontWeight: '500',
      color: colors.text.primary,
    },
    infoSection: {
      alignItems: 'center',
      paddingVertical: SPACING.lg,
    },
    versionText: {
      fontSize: FONT_SIZES.small,
      color: colors.text.tertiary,
      marginBottom: 4,
    },
    copyrightText: {
      fontSize: FONT_SIZES.small,
      color: colors.text.tertiary,
    },
    bottomSpace: {
      height: SPACING.xxl,
    },
  });
};

export default ProfileScreen;
