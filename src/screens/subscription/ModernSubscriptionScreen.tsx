import React, { useState, useEffect, useRef } from 'react';
import { View, Text, ScrollView, TouchableOpacity, StyleSheet, SafeAreaView, Dimensions, Linking, Share, Platform,  } from 'react-native';
import { COLORS, SPACING } from '../../utils/constants';
import { SUBSCRIPTION_PLANS } from '../../config/adConfig';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { useAppTheme } from '../../hooks/useAppTheme';
import { useAppSelector } from '../../hooks/redux';
import { selectCurrentTokens, selectSubscriptionPlan } from '../../store/slices/userSlice';
import tokenService from '../../services/subscription/tokenService';
import inAppPurchaseService from '../../services/subscription/inAppPurchaseService';
import AsyncStorage from '@react-native-async-storage/async-storage';
import rewardAdService from '../../services/rewardAdService';
import missionService from '../../services/missionService';
import TokenPurchaseView from '../../components/TokenPurchaseView';
import EarnTokenModal from '../../components/EarnTokenModal';

import { Alert } from '../../utils/customAlert';
const { width: screenWidth } = Dimensions.get('window');

interface SubscriptionScreenProps {
  navigation: any;
  route?: any;
  currentPlan?: 'free' | 'premium' | 'pro';
}

export const ModernSubscriptionScreen: React.FC<SubscriptionScreenProps> = ({
  navigation,
  route,
  currentPlan = 'free'
}) => {
  const { colors, isDark } = useAppTheme();
  const currentTokens = useAppSelector(selectCurrentTokens);
  const subscriptionPlan = useAppSelector(selectSubscriptionPlan);
  const [selectedPlan, setSelectedPlan] = useState<'free' | 'starter' | 'premium' | 'pro'>('premium');
  const [activeTab, setActiveTab] = useState<'subscription' | 'tokens' | 'manage'>('subscription');
  const [showEarnTokenModal, setShowEarnTokenModal] = useState(false);
  const [stats, setStats] = useState({
    totalTokens: 0,
  });
  const [realSubscriptionPlan, setRealSubscriptionPlan] = useState<'free' | 'starter' | 'premium' | 'pro'>('free');
  const [adStats, setAdStats] = useState({
    dailyCount: 0,
    remainingToday: 10,
    dailyLimit: 10,
  });

  // ScrollView and PRO card refs
  const scrollViewRef = useRef<ScrollView>(null);
  const proCardRef = useRef<View>(null);

  useEffect(() => {
    loadTokenStats();
    loadAdStats();

    const checkInitialTab = async () => {
      const initialTab = await AsyncStorage.getItem('subscription_initial_tab');
      if (initialTab) {
        setActiveTab(initialTab as any);
        await AsyncStorage.removeItem('subscription_initial_tab');
      }
    };
    checkInitialTab();

    rewardAdService.preloadAd();

    // Check if we need to scroll to PRO card
    if (route?.params?.scrollToPro) {
      // Delay to ensure layout is complete
      setTimeout(() => {
        proCardRef.current?.measureLayout(
          scrollViewRef.current as any,
          (x, y) => {
            scrollViewRef.current?.scrollTo({ y: y - 20, animated: true });
          },
          () => {}
        );
      }, 300);
    }
  }, []);

  // Íµ¨ÎèÖ ÌîåÎûúÏù¥ Î≥ÄÍ≤ΩÎêòÎ©¥ ÌôîÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    console.log('[ModernSubscriptionScreen] subscriptionPlan changed to:', subscriptionPlan);
  }, [subscriptionPlan]);

  useEffect(() => {
    if (activeTab === 'manage') {
      loadTokenStats();
      loadAdStats();
    }
  }, [activeTab]);

  const loadTokenStats = async () => {
    try {
      const tokenInfo = await tokenService.getTokenInfo();
      const totalTokens = tokenInfo.daily + tokenInfo.purchased;
      
      setStats({
        totalTokens: totalTokens,
      });
      
      setRealSubscriptionPlan(tokenInfo.plan || 'free');
    } catch (error) {
      console.error('Failed to load token stats:', error);
    }
  };

  const loadAdStats = async () => {
    try {
      const stats = await rewardAdService.getAdStats();
      setAdStats(stats);
    } catch (error) {
      console.error('Failed to load ad stats:', error);
    }
  };

  const handleEarnTokens = async (tokens: number) => {
    try {
      const subscription = await tokenService.getSubscription();
      subscription.dailyTokens += tokens;
      await AsyncStorage.setItem('USER_SUBSCRIPTION', JSON.stringify(subscription));
      
      await loadTokenStats();
      
      Alert.alert(
        'ÌÜ†ÌÅ∞ ÌöçÎìù! üéâ',
        `${tokens}Í∞úÏùò ÌÜ†ÌÅ∞ÏùÑ Î∞õÏïòÏñ¥Ïöî!`,
        [{ text: 'ÌôïÏù∏' }]
      );
    } catch (error) {
      console.error('Failed to add tokens:', error);
    }
  };

  const handleWatchAd = async () => {
    const { canWatch, reason } = await rewardAdService.canWatchAd();
    
    if (!canWatch) {
      Alert.alert('Í¥ëÍ≥† ÏãúÏ≤≠ Î∂àÍ∞Ä', reason || 'Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    Alert.alert(
      'Í¥ëÍ≥† ÏãúÏ≤≠',
      '30Ï¥à Í¥ëÍ≥†Î•º ÏãúÏ≤≠ÌïòÍ≥† 2Í∞úÏùò ÌÜ†ÌÅ∞ÏùÑ Î∞õÏúºÏãúÍ≤†Ïñ¥Ïöî?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'ÏãúÏ≤≠ÌïòÍ∏∞',
          onPress: async () => {
            const result = await rewardAdService.showRewardedAd();
            
            if (result.success && result.reward) {
              await handleEarnTokens(result.reward);
              
              const missionResult = await missionService.trackAction('ad_watch');
              if (missionResult.rewardsEarned > 0) {
                setTimeout(() => {
                  Alert.alert(
                    'ÎØ∏ÏÖò ÏôÑÎ£å! üéØ',
                    `Í¥ëÍ≥† ÏãúÏ≤≠ ÎØ∏ÏÖòÏùÑ ÏôÑÎ£åÌïòÏó¨ Ï∂îÍ∞ÄÎ°ú ${missionResult.rewardsEarned}Í∞úÏùò ÌÜ†ÌÅ∞ÏùÑ Î∞õÏïòÏäµÎãàÎã§!`,
                    [{ text: 'ÌôïÏù∏', onPress: () => handleEarnTokens(missionResult.rewardsEarned) }]
                  );
                }, 1000);
              }
              
              await loadAdStats();
            } else if (result.error) {
              Alert.alert('Í¥ëÍ≥† ÏãúÏ≤≠ Ïã§Ìå®', result.error);
            }
          }
        }
      ]
    );
  };

  const handleDailyCheck = async () => {
    const today = new Date().toDateString();
    const lastCheck = await AsyncStorage.getItem('last_daily_check');
    
    if (lastCheck === today) {
      Alert.alert('ÏïåÎ¶º', 'Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ Ï∂úÏÑù Ï≤¥ÌÅ¨Î•º ÌñàÏñ¥Ïöî!');
      return;
    }
    
    await AsyncStorage.setItem('last_daily_check', today);
    await handleEarnTokens(1);
    
    const result = await missionService.trackAction('login');
    if (result.rewardsEarned > 0) {
      Alert.alert(
        'ÎØ∏ÏÖò ÏôÑÎ£å! üéØ',
        `Ï∂úÏÑù ÎØ∏ÏÖòÏùÑ ÏôÑÎ£åÌïòÏó¨ Ï∂îÍ∞ÄÎ°ú ${result.rewardsEarned}Í∞úÏùò ÌÜ†ÌÅ∞ÏùÑ Î∞õÏïòÏäµÎãàÎã§!`
      );
      await handleEarnTokens(result.rewardsEarned);
    }
  };

  const handleShareSNS = async () => {
    try {
      const result = await Share.share({
        message: 'PostyÎ°ú AIÍ∞Ä ÎßåÎìúÎäî SNS ÏΩòÌÖêÏ∏†! ÏßÄÍ∏à Î∞îÎ°ú ÏÇ¨Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî üöÄ\nhttps://posty.app',
        title: 'Posty - AI ÏΩòÌÖêÏ∏† ÏÉùÏÑ±',
      });
      
      if (result.action === Share.sharedAction) {
        const today = new Date().toDateString();
        const sharedToday = await AsyncStorage.getItem(`shared_sns_${today}`);
        
        if (!sharedToday) {
          await AsyncStorage.setItem(`shared_sns_${today}`, 'true');
          await handleEarnTokens(3);
          
          const missionResult = await missionService.trackAction('share');
          if (missionResult.rewardsEarned > 0) {
            Alert.alert(
              'ÎØ∏ÏÖò ÏôÑÎ£å! üéØ',
              `Í≥µÏú† ÎØ∏ÏÖòÏùÑ ÏôÑÎ£åÌïòÏó¨ Ï∂îÍ∞ÄÎ°ú ${missionResult.rewardsEarned}Í∞úÏùò ÌÜ†ÌÅ∞ÏùÑ Î∞õÏïòÏäµÎãàÎã§!`
            );
            await handleEarnTokens(missionResult.rewardsEarned);
          }
        } else {
          Alert.alert('ÏïåÎ¶º', 'Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ SNS Í≥µÏú†Î•º ÌñàÏñ¥Ïöî!');
        }
      }
    } catch (error) {
      console.error('Share error:', error);
    }
  };

  const handleInviteFriend = async () => {
    try {
      const inviteCode = Math.random().toString(36).substring(2, 8).toUpperCase();
      const inviteLink = `https://posty.app/invite/${inviteCode}`;
      
      const result = await Share.share({
        message: `PostyÎ°ú ÏπúÍµ¨Î•º Ï¥àÎåÄÌïòÏÑ∏Ïöî! Ï¥àÎåÄ ÏΩîÎìú: ${inviteCode}\n${inviteLink}`,
        title: 'Posty Ï¥àÎåÄÌïòÍ∏∞',
      });
      
      if (result.action === Share.sharedAction) {
        Alert.alert(
          'Ï¥àÎåÄ Ï†ÑÏÜ°',
          'ÏπúÍµ¨Í∞Ä Í∞ÄÏûÖÌïòÎ©¥ 5Í∞úÏùò ÌÜ†ÌÅ∞ÏùÑ Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî!',
          [{ text: 'ÌôïÏù∏' }]
        );
        
        await missionService.trackAction('invite');
      }
    } catch (error) {
      console.error('Invite error:', error);
    }
  };

  const handleRateApp = async () => {
    const hasRated = await AsyncStorage.getItem('app_rated');
    
    if (hasRated) {
      Alert.alert('ÏïåÎ¶º', 'Ïù¥ÎØ∏ Ïï±ÏùÑ ÌèâÍ∞ÄÌï¥Ï£ºÏÖ®Ïñ¥Ïöî. Í∞êÏÇ¨Ìï©ÎãàÎã§!');
      return;
    }
    
    Alert.alert(
      'Ïï± ÌèâÍ∞ÄÌïòÍ∏∞',
      'PostyÍ∞Ä ÎèÑÏõÄÏù¥ ÎêòÏÖ®ÎÇòÏöî? ÌèâÍ∞ÄÎ•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî!',
      [
        { text: 'ÎÇòÏ§ëÏóê', style: 'cancel' },
        {
          text: 'ÌèâÍ∞ÄÌïòÎü¨ Í∞ÄÍ∏∞',
          onPress: async () => {
            try {
              const storeUrl = Platform.OS === 'ios'
                ? 'https://apps.apple.com/app/posty-ai/id123456789'
                : 'https://play.google.com/store/apps/details?id=com.posty.ai';
              
              await Linking.openURL(storeUrl);
              
              setTimeout(async () => {
                await AsyncStorage.setItem('app_rated', 'true');
                await handleEarnTokens(10);
              }, 3000);
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Ïä§ÌÜ†Ïñ¥Î•º Ïó¥ Ïàò ÏóÜÏñ¥Ïöî.');
            }
          }
        }
      ]
    );
  };

  const handleCompleteMission = () => {
    navigation.navigate('Mission');
  };

  const subscriptionExpiresAt = useAppSelector(state => state.user.subscriptionExpiresAt);

  // Íµ¨ÎèÖ ÎßåÎ£åÏùº Í≥ÑÏÇ∞
  const getSubscriptionExpiryDate = () => {
    if (subscriptionExpiresAt) {
      return new Date(subscriptionExpiresAt);
    }
    // ÏûÑÏãúÎ°ú 30Ïùº ÌõÑÎ°ú ÏÑ§Ï†ï
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + 30);
    return expiryDate;
  };

  const formatExpiryDate = (date: Date) => {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    return `${year}ÎÖÑ ${month}Ïõî ${day}Ïùº`;
  };

  const calculateDaysRemaining = (expiryDate: Date) => {
    const today = new Date();
    const diffTime = expiryDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const handleCancelSubscription = () => {
    Alert.alert(
      'Íµ¨ÎèÖ Ï∑®ÏÜå',
      `${SUBSCRIPTION_PLANS[subscriptionPlan].name} ÌîåÎûú Íµ¨ÎèÖÏùÑ Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏ∑®ÏÜåÌï¥ÎèÑ Îã§Ïùå Í≤∞Ï†úÏùºÍπåÏßÄ ÌòÑÏû¨ ÌîåÎûúÏùÑ Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.`,
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'Íµ¨ÎèÖ Ï∑®ÏÜå', 
          style: 'destructive',
          onPress: async () => {
            try {
              // TODO: Ïã§Ï†ú Íµ¨ÎèÖ Ï∑®ÏÜå API Ìò∏Ï∂ú
              // await inAppPurchaseService.cancelSubscription();
              
              Alert.alert(
                'Íµ¨ÎèÖ Ï∑®ÏÜå ÏôÑÎ£å',
                'Íµ¨ÎèÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§. Îã§Ïùå Í≤∞Ï†úÏùºÍπåÏßÄ ÌòÑÏû¨ ÌîåÎûúÏùÑ Í≥ÑÏÜç Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
                [{ text: 'ÌôïÏù∏' }]
              );
            } catch (error) {
              Alert.alert(
                'Íµ¨ÎèÖ Ï∑®ÏÜå Ïã§Ìå®',
                'Íµ¨ÎèÖ Ï∑®ÏÜå Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
                [{ text: 'ÌôïÏù∏' }]
              );
            }
          }
        },
      ]
    );
  };

  const calculateTokenChange = (newPlan: 'starter' | 'premium' | 'pro') => {
    let tokenChange = 0;
    let description = '';
    
    if (subscriptionPlan === 'free') {
      if (newPlan === 'starter') {
        tokenChange = 300;
        description = 'Í∞ÄÏûÖ Ï¶âÏãú 300Í∞ú ÌÜ†ÌÅ∞ÏùÑ Î∞õÍ≤å Îê©ÎãàÎã§';
      } else if (newPlan === 'premium') {
        tokenChange = 500;
        description = 'Í∞ÄÏûÖ Ï¶âÏãú 500Í∞ú ÌÜ†ÌÅ∞ÏùÑ Î∞õÍ≤å Îê©ÎãàÎã§';
      } else if (newPlan === 'pro') {
        tokenChange = 9999;
        description = 'Î¨¥Ï†úÌïú ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§';
      }
    } else if (subscriptionPlan === 'starter') {
      if (newPlan === 'premium') {
        tokenChange = 500;
        description = 'Ï†ÑÏï° 500Í∞ú ÌÜ†ÌÅ∞ÏùÑ Ï∂îÍ∞ÄÎ°ú Î∞õÍ≤å Îê©ÎãàÎã§';
      } else if (newPlan === 'pro') {
        tokenChange = 9999;
        description = 'Î¨¥Ï†úÌïú ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§';
      }
    } else if (subscriptionPlan === 'premium') {
      if (newPlan === 'pro') {
        tokenChange = 9999;
        description = 'Î¨¥Ï†úÌïú ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§';
      } else if (newPlan === 'starter') {
        tokenChange = 0;
        description = 'Í≤ΩÍ≥†: Î¨¥Î£å ÌÜ†ÌÅ∞Ïù¥ 300Í∞úÎ°ú Ï†úÌïúÎê©ÎãàÎã§';
      }
    }
    
    return { tokenChange, description };
  };

  const handleSubscribe = async (planKey?: 'free' | 'starter' | 'premium' | 'pro') => {
    const targetPlan = planKey || selectedPlan;
    
    if (targetPlan === 'free') {
      navigation.goBack();
      return;
    }
    
    // Îã§Ïö¥Í∑∏Î†àÏù¥Îìú Ï≤¥ÌÅ¨
    const isDowngrade = (
      (subscriptionPlan === 'pro' && targetPlan !== 'pro') ||
      (subscriptionPlan === 'premium' && (targetPlan === 'starter' || targetPlan === 'free')) ||
      (subscriptionPlan === 'starter' && targetPlan === 'free')
    );
    
    if (isDowngrade) {
      Alert.alert(
        'Îã§Ïö¥Í∑∏Î†àÏù¥Îìú Î∂àÍ∞Ä',
        'ÌïòÏúÑ ÌîåÎûúÏúºÎ°ú Î≥ÄÍ≤ΩÌï† Ïàò ÏóÜÏäµÎãàÎã§.\n\nÌòÑÏû¨ Íµ¨ÎèÖÏùÑ Ï∑®ÏÜåÌïòÍ≥† ÎßåÎ£å ÌõÑ ÏÉàÎ°ú Í∞ÄÏûÖÌï¥Ï£ºÏÑ∏Ïöî.',
        [{ text: 'ÌôïÏù∏' }]
      );
      return;
    }
    
    const { tokenChange, description } = calculateTokenChange(targetPlan);
    const afterTokens = targetPlan === 'pro' ? 'Î¨¥Ï†úÌïú' : 
                       targetPlan === 'starter' && subscriptionPlan === 'free' ? currentTokens + 300 :
                       targetPlan === 'premium' && subscriptionPlan === 'free' ? currentTokens + 500 :
                       targetPlan === 'premium' && subscriptionPlan === 'starter' ? currentTokens + 500 :
                       currentTokens;
    
    const message = `${SUBSCRIPTION_PLANS[targetPlan].name} ÌîåÎûúÏùÑ Íµ¨ÎèÖÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n${description}\nÌòÑÏû¨ ÌÜ†ÌÅ∞: ${currentTokens}Í∞ú\nÎ≥ÄÍ≤Ω ÌõÑ: ${targetPlan === 'pro' ? 'Î¨¥Ï†úÌïú' : afterTokens + 'Í∞ú'}`;

    Alert.alert(
      'Íµ¨ÎèÖ ÌôïÏù∏',
      message,
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'Íµ¨ÎèÖÌïòÍ∏∞', 
          onPress: async () => {
            try {
              await inAppPurchaseService.purchaseSubscription(targetPlan, false);
              // Íµ¨ÎèÖ ÏôÑÎ£å ÌõÑ ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
              setTimeout(() => {
                loadTokenStats();
              }, 1000);
            } catch (error) {
              console.error('Subscription error:', error);
              Alert.alert(
                'Íµ¨ÎèÖ Ïã§Ìå®',
                'Íµ¨ÎèÖ Ï≤òÎ¶¨ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
                [{ text: 'ÌôïÏù∏' }]
              );
            }
          }
        },
      ]
    );
  };

  const planColors = {
    free: '#6B7280',
    starter: '#10B981',  // STARTER - Í∑∏Î¶∞ ÏÉâÏÉÅ
    premium: '#F59E0B',  // PRO - Í≥®Îìú ÏÉâÏÉÅ
    pro: '#8B5CF6',      // MAX - Î≥¥Îùº ÏÉâÏÉÅ
  };

  const planIcons = {
    free: 'account-circle',
    starter: 'flight-takeoff',
    premium: 'star',
    pro: 'workspace-premium',
  };

  const renderPlanCard = (planKey: 'free' | 'starter' | 'premium' | 'pro') => {
    const plan = SUBSCRIPTION_PLANS[planKey];
    const isSelected = selectedPlan === planKey;
    const isCurrent = subscriptionPlan === planKey;
    const isPopular = planKey === 'premium';
    const planColor = planColors[planKey];

    // Îã§Ïö¥Í∑∏Î†àÏù¥Îìú Ï≤¥ÌÅ¨
    const isDowngrade = (
      (subscriptionPlan === 'pro' && planKey !== 'pro') ||
      (subscriptionPlan === 'premium' && (planKey === 'starter' || planKey === 'free')) ||
      (subscriptionPlan === 'starter' && planKey === 'free')
    );

    return (
      <TouchableOpacity
        key={planKey}
        ref={planKey === 'pro' ? proCardRef : undefined}
        style={[
          styles.planCard,
          isSelected && styles.selectedPlanCard,
          isSelected && { borderColor: planColor },
          isDowngrade && styles.downgradePlanCard
        ]}
        onPress={() => !isDowngrade && setSelectedPlan(planKey)}
        activeOpacity={isDowngrade ? 1 : 0.9}
        disabled={isDowngrade}
      >
        {isPopular && (
          <View style={[styles.popularBadge, { backgroundColor: planColor }]}>
            <Text style={styles.popularBadgeText}>Ïù∏Í∏∞</Text>
          </View>
        )}

        <View style={styles.planHeader}>
          <View style={styles.planTitleRow}>
            <Icon 
              name={planIcons[planKey]} 
              size={24} 
              color={isSelected ? planColor : colors.text.secondary} 
              style={{ marginRight: 8 }}
            />
            <Text style={[styles.planName, { color: isSelected ? planColor : colors.text.primary }]}>
              {plan.name}
            </Text>
            {isCurrent && (
              <View style={styles.currentBadge}>
                <Text style={styles.currentBadgeText}>ÌòÑÏû¨ Ïù¥Ïö©Ï§ë</Text>
              </View>
            )}
          </View>
          {isSelected && (
            <View style={[styles.selectedCheckmark, { backgroundColor: planColor }]}>
              <Icon name="check" size={16} color="#FFFFFF" />
            </View>
          )}
        </View>

        <View style={styles.priceContainer}>
          <Text style={[styles.price, isSelected && { color: planColor }]}>
            {plan.price === 0 ? 'Î¨¥Î£å' : `‚Ç©${plan.price.toLocaleString()}`}
          </Text>
          <Text style={styles.priceUnit}>/Ïõî</Text>
        </View>

        <View style={[styles.tokenInfo, { backgroundColor: isDowngrade ? colors.lightGray + '50' : planColor + '15' }]}>
          <Icon name="flash-on" size={18} color={isDowngrade ? colors.text.secondary : planColor} />
          <Text style={[styles.tokenText, { color: isDowngrade ? colors.text.secondary : planColor }]}>
          {isDowngrade ? 'ÌïòÏúÑ ÌîåÎûúÏúºÎ°ú Î≥ÄÍ≤Ω Î∂àÍ∞Ä' :
           planKey === 'free' ? 'Îß§Ïùº 10Í∞ú Î¨¥Î£å Ï∂©Ï†Ñ' : 
           planKey === 'starter' ? 'Í∞ÄÏûÖ Ïãú 300Í∞ú + Îß§Ïùº 10Í∞ú' :
           planKey === 'premium' ? 'Í∞ÄÏûÖ Ïãú 500Í∞ú + Îß§Ïùº 20Í∞ú' :
           'Î¨¥Ï†úÌïú ÌÜ†ÌÅ∞'}
          </Text>
        </View>

        <View style={styles.features}>
          {plan.features?.slice(0, 3).map((feature, index) => (
            <View key={index} style={styles.featureItem}>
              <Icon name="check" size={16} color={isSelected ? planColor : '#10B981'} />
              <Text style={styles.featureText}>{feature}</Text>
            </View>
          ))}
        </View>

        {/* Í∞Å Ïπ¥Îìú ÎÇ¥ Íµ¨Îß§ Î≤ÑÌäº */}
        {planKey !== 'free' && (
          <TouchableOpacity
            style={[
              styles.cardPurchaseButton,
              { backgroundColor: isCurrent ? colors.lightGray : isDowngrade ? colors.lightGray : planColor },
              (isCurrent || isDowngrade) && styles.cardPurchaseButtonDisabled
            ]}
            onPress={() => !isCurrent && !isDowngrade && handleSubscribe(planKey)}
            activeOpacity={isCurrent || isDowngrade ? 1 : 0.8}
            disabled={isCurrent || isDowngrade}
          >
            <Text style={[
              styles.cardPurchaseButtonText,
              (isCurrent || isDowngrade) && styles.cardPurchaseButtonTextDisabled
            ]}>
              {isCurrent ? 'ÌòÑÏû¨ Ïù¥Ïö©Ï§ë' : isDowngrade ? 'Íµ¨Îß§ Î∂àÍ∞Ä' : 'Íµ¨ÎèÖÌïòÍ∏∞'}
            </Text>
            {!isCurrent && !isDowngrade && <Icon name="arrow-forward" size={18} color="#FFFFFF" />}
          </TouchableOpacity>
        )}
      </TouchableOpacity>
    );
  };

  const styles = createStyles(colors, isDark);

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Icon name="arrow-back" size={24} color={colors.text.primary} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>
          {activeTab === 'subscription' ? 'Íµ¨ÎèÖ ÌîåÎûú' : activeTab === 'tokens' ? 'ÌÜ†ÌÅ∞ Íµ¨Îß§' : 'Î¨¥Î£å ÌÜ†ÌÅ∞'}
        </Text>
        <TouchableOpacity 
          style={styles.headerButton}
          onPress={() => setShowEarnTokenModal(true)}
        >
          <Icon name="flash-on" size={20} color={colors.primary} />
          <Text style={styles.currentTokens}>{subscriptionPlan === 'pro' ? 'Î¨¥Ï†úÌïú' : currentTokens}</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[
            styles.tabButton,
            activeTab === 'subscription' && styles.activeTab,
          ]}
          onPress={() => setActiveTab('subscription')}
        >
          <Icon 
            name="workspace-premium" 
            size={20} 
            color={activeTab === 'subscription' ? colors.primary : colors.text.secondary} 
          />
          <Text style={[
            styles.tabText,
            activeTab === 'subscription' && styles.activeTabText
          ]}>
            Íµ¨ÎèÖ ÌîåÎûú
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[
            styles.tabButton,
            activeTab === 'tokens' && styles.activeTab,
          ]}
          onPress={() => setActiveTab('tokens')}
        >
          <Icon 
            name="flash-on" 
            size={20} 
            color={activeTab === 'tokens' ? colors.primary : colors.text.secondary} 
          />
          <Text style={[
            styles.tabText,
            activeTab === 'tokens' && styles.activeTabText
          ]}>
            ÌÜ†ÌÅ∞ Íµ¨Îß§
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[
            styles.tabButton,
            activeTab === 'manage' && styles.activeTab,
          ]}
          onPress={() => setActiveTab('manage')}
        >
          <Icon 
            name="account-balance-wallet" 
            size={20} 
            color={activeTab === 'manage' ? colors.primary : colors.text.secondary} 
          />
          <Text style={[
            styles.tabText,
            activeTab === 'manage' && styles.activeTabText
          ]}>
            Î¨¥Î£å ÌÜ†ÌÅ∞
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView
        ref={scrollViewRef}
        style={styles.content}
        showsVerticalScrollIndicator={false}
      >
        {activeTab === 'subscription' ? (
          <>
            <View style={styles.heroSection}>
              <Text style={styles.heroTitle}>
                Ìè¨Ïä§Ìã∞ÏôÄ Ìï®Íªò{'\n'}Îçî ÎßéÏùÄ ÏΩòÌÖêÏ∏†Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî
              </Text>
              <Text style={styles.heroSubtitle}>
                AIÍ∞Ä ÎãπÏã†Ïùò ÌÅ¨Î¶¨ÏóêÏù¥Ìã∞Î∏å ÌååÌä∏ÎÑàÍ∞Ä ÎêòÏñ¥ÎìúÎ¶ΩÎãàÎã§
              </Text>
            </View>

            <View style={styles.plansContainer}>
              {renderPlanCard('free')}
              {renderPlanCard('starter')}
              {renderPlanCard('premium')}
              {renderPlanCard('pro')}
            </View>

            <View style={styles.benefitsSection}>
              <Text style={styles.sectionTitle}>ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌòúÌÉù</Text>
              
              <View style={styles.benefitCard}>
                <View style={[styles.benefitIcon, { backgroundColor: '#8B5CF6' + '20' }]}>
                  <Icon name="flash-on" size={24} color="#8B5CF6" />
                </View>
                <View style={styles.benefitContent}>
                  <Text style={styles.benefitTitle}>Îçî ÎßéÏùÄ ÌÜ†ÌÅ∞</Text>
                  <Text style={styles.benefitDesc}>
                  STARTERÎäî Ï¥ù 600Í∞ú(Ï¥àÍ∏∞ 300 + ÏùºÏùº 10x30), PROÎäî Ï¥ù 1,100Í∞ú(Ï¥àÍ∏∞ 500 + ÏùºÏùº 20x30), MAXÎäî Î¨¥Ï†úÌïú ÌÜ†ÌÅ∞ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§
                  </Text>
                </View>
              </View>

              <View style={styles.benefitCard}>
                <View style={[styles.benefitIcon, { backgroundColor: '#EC4899' + '20' }]}>
                  <Icon name="auto-awesome" size={24} color="#EC4899" />
                </View>
                <View style={styles.benefitContent}>
                  <Text style={styles.benefitTitle}>Í≥†Í∏â AI Î™®Îç∏</Text>
                  <Text style={styles.benefitDesc}>
                    ÌîåÎûúÎ≥Ñ Ï∞®Î≥ÑÌôîÎêú AI Î™®Îç∏ Ï†úÍ≥µ (GPT-4o, GPT-4 Turbo)
                  </Text>
                </View>
              </View>

              <View style={styles.benefitCard}>
                <View style={[styles.benefitIcon, { backgroundColor: '#10B981' + '20' }]}>
                  <Icon name="block" size={24} color="#10B981" />
                </View>
                <View style={styles.benefitContent}>
                  <Text style={styles.benefitTitle}>Í¥ëÍ≥† Ï†úÍ±∞</Text>
                  <Text style={styles.benefitDesc}>
                    Î∞©Ìï¥Î∞õÏßÄ ÏïäÍ≥† ÏΩòÌÖêÏ∏† Ï†úÏûëÏóêÎßå ÏßëÏ§ëÌï† Ïàò ÏûàÏäµÎãàÎã§
                  </Text>
                </View>
              </View>
            </View>

            {/* Íµ¨ÎèÖ Í¥ÄÎ¶¨ ÏÑπÏÖò */}
            {subscriptionPlan !== 'free' && (
              <View style={styles.subscriptionManagement}>
                <Text style={styles.sectionTitle}>Íµ¨ÎèÖ Í¥ÄÎ¶¨</Text>
                
                <View style={styles.subscriptionInfoCard}>
                  <View style={styles.planInfoRow}>
                    <View style={styles.planInfoItem}>
                      <Text style={styles.planInfoLabel}>ÌòÑÏû¨ ÌîåÎûú</Text>
                      <Text style={styles.planInfoValue}>
                        {SUBSCRIPTION_PLANS[subscriptionPlan].name}
                      </Text>
                    </View>
                    <View style={styles.planInfoDivider} />
                    <View style={styles.planInfoItem}>
                      <Text style={styles.planInfoLabel}>Ïõî ÏöîÍ∏à</Text>
                      <Text style={styles.planInfoValue}>
                        {SUBSCRIPTION_PLANS[subscriptionPlan].priceDisplay}
                      </Text>
                    </View>
                  </View>
                  
                  <View style={styles.expiryInfoContainer}>
                    <Icon name="event" size={20} color={colors.primary} />
                    <View style={styles.expiryTextContainer}>
                      <Text style={styles.expiryLabel}>Îã§Ïùå Í≤∞Ï†úÏùº</Text>
                      <Text style={styles.expiryDate}>
                        {formatExpiryDate(getSubscriptionExpiryDate())}
                      </Text>
                      <Text style={styles.daysRemaining}>
                        {calculateDaysRemaining(getSubscriptionExpiryDate())}Ïùº ÎÇ®Ïùå
                      </Text>
                    </View>
                  </View>
                  
                  <View style={styles.autoRenewInfo}>
                    <Icon name="autorenew" size={16} color={colors.text.secondary} />
                    <Text style={styles.autoRenewText}>
                      ÏûêÎèô Í∞±Ïã† ÌôúÏÑ±ÌôîÎê®
                    </Text>
                  </View>
                </View>
                
                <TouchableOpacity
                  style={styles.cancelButton}
                  onPress={() => handleCancelSubscription()}
                >
                  <Icon name="cancel" size={20} color={colors.error || '#FF3B30'} />
                  <Text style={styles.cancelButtonText}>Íµ¨ÎèÖ Ï∑®ÏÜå</Text>
                </TouchableOpacity>
                
                <Text style={styles.cancelInfo}>
                  Íµ¨ÎèÖÏùÑ Ï∑®ÏÜåÌï¥ÎèÑ {formatExpiryDate(getSubscriptionExpiryDate())}ÍπåÏßÄ 
                  ÌòÑÏû¨ ÌîåÎûúÏùÑ Í≥ÑÏÜç Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                </Text>
              </View>
            )}
          </>
        ) : activeTab === 'tokens' ? (
          <TokenPurchaseView 
            onPurchase={async (tokenAmount) => {
              try {
                await inAppPurchaseService.purchaseTokens(tokenAmount);
              } catch (error) {
                console.error('Token purchase error:', error);
              }
            }}
            colors={colors}
            isDark={isDark}
          />
        ) : activeTab === 'manage' ? (
          <>
            <View style={styles.heroSection}>
              <Text style={styles.heroTitle}>
                Î¨¥Î£å ÌÜ†ÌÅ∞ Î∞õÍ∏∞
              </Text>
              <Text style={styles.heroSubtitle}>
                Îã§ÏñëÌïú ÌôúÎèôÏúºÎ°ú Î¨¥Î£å ÌÜ†ÌÅ∞ÏùÑ ÌöçÎìùÌïòÏÑ∏Ïöî
              </Text>
            </View>

            <View style={styles.tokenInfoBanner}>
              <Icon name="info-outline" size={16} color={colors.text.secondary} />
              <Text style={styles.tokenInfoText}>
                ÌòÑÏû¨ {stats.totalTokens}Í∞úÏùò ÌÜ†ÌÅ∞ÏùÑ Î≥¥Ïú†ÌïòÍ≥† ÏûàÏäµÎãàÎã§
              </Text>
            </View>

            <View style={styles.earnTokensSection}>
              <View style={styles.earnTokensList}>
                <TouchableOpacity 
                  style={styles.earnTokenItem}
                  onPress={() => handleWatchAd()}
                >
                  <View style={[styles.earnTokenIcon, { backgroundColor: '#8B5CF6' + '20' }]}>
                    <Icon name="play-circle" size={24} color="#8B5CF6" />
                  </View>
                  <View style={styles.earnTokenInfo}>
                    <Text style={styles.earnTokenTitle}>Í¥ëÍ≥† Î≥¥Í∏∞</Text>
                    <Text style={styles.earnTokenDesc}>+2 ÌÜ†ÌÅ∞ ({adStats.remainingToday}/{adStats.dailyLimit || 10}Ìöå ÎÇ®Ïùå)</Text>
                  </View>
                  <Icon name="chevron-right" size={20} color={colors.text.tertiary} />
                </TouchableOpacity>

                <TouchableOpacity 
                  style={styles.earnTokenItem}
                  onPress={() => handleDailyCheck()}
                >
                  <View style={[styles.earnTokenIcon, { backgroundColor: '#10B981' + '20' }]}>
                    <Icon name="event-available" size={24} color="#10B981" />
                  </View>
                  <View style={styles.earnTokenInfo}>
                    <Text style={styles.earnTokenTitle}>ÏùºÏùº Ï∂úÏÑù</Text>
                    <Text style={styles.earnTokenDesc}>+1 ÌÜ†ÌÅ∞ (Ïò§Îäò Í∞ÄÎä•)</Text>
                  </View>
                  <Icon name="chevron-right" size={20} color={colors.text.tertiary} />
                </TouchableOpacity>

                <TouchableOpacity 
                  style={styles.earnTokenItem}
                  onPress={() => handleShareSNS()}
                >
                  <View style={[styles.earnTokenIcon, { backgroundColor: '#EC4899' + '20' }]}>
                    <Icon name="share" size={24} color="#EC4899" />
                  </View>
                  <View style={styles.earnTokenInfo}>
                    <Text style={styles.earnTokenTitle}>SNS Í≥µÏú†</Text>
                    <Text style={styles.earnTokenDesc}>+3 ÌÜ†ÌÅ∞ (1/1Ìöå ÎÇ®Ïùå)</Text>
                  </View>
                  <Icon name="chevron-right" size={20} color={colors.text.tertiary} />
                </TouchableOpacity>

                <TouchableOpacity 
                  style={styles.earnTokenItem}
                  onPress={() => handleInviteFriend()}
                >
                  <View style={[styles.earnTokenIcon, { backgroundColor: '#F59E0B' + '20' }]}>
                    <Icon name="person-add" size={24} color="#F59E0B" />
                  </View>
                  <View style={styles.earnTokenInfo}>
                    <Text style={styles.earnTokenTitle}>ÏπúÍµ¨ Ï¥àÎåÄ</Text>
                    <Text style={styles.earnTokenDesc}>+5 ÌÜ†ÌÅ∞ (ÏπúÍµ¨Îãπ)</Text>
                  </View>
                  <Icon name="chevron-right" size={20} color={colors.text.tertiary} />
                </TouchableOpacity>

                <TouchableOpacity 
                  style={styles.earnTokenItem}
                  onPress={() => handleRateApp()}
                >
                  <View style={[styles.earnTokenIcon, { backgroundColor: '#6366F1' + '20' }]}>
                    <Icon name="star" size={24} color="#6366F1" />
                  </View>
                  <View style={styles.earnTokenInfo}>
                    <Text style={styles.earnTokenTitle}>Ïï± ÌèâÍ∞ÄÌïòÍ∏∞</Text>
                    <Text style={styles.earnTokenDesc}>+10 ÌÜ†ÌÅ∞ (1Ìöå)</Text>
                  </View>
                  <Icon name="chevron-right" size={20} color={colors.text.tertiary} />
                </TouchableOpacity>

                <TouchableOpacity 
                  style={styles.earnTokenItem}
                  onPress={() => handleCompleteMission()}
                >
                  <View style={[styles.earnTokenIcon, { backgroundColor: '#14B8A6' + '20' }]}>
                    <Icon name="task-alt" size={24} color="#14B8A6" />
                  </View>
                  <View style={styles.earnTokenInfo}>
                    <Text style={styles.earnTokenTitle}>ÎØ∏ÏÖò ÏôÑÎ£å</Text>
                    <Text style={styles.earnTokenDesc}>+3 ÌÜ†ÌÅ∞ (ÏùºÏùº ÎØ∏ÏÖò)</Text>
                  </View>
                  <Icon name="chevron-right" size={20} color={colors.text.tertiary} />
                </TouchableOpacity>
              </View>

              <View style={styles.earnTokenTip}>
                <Icon name="lightbulb-outline" size={20} color={colors.primary} />
                <Text style={styles.earnTokenTipText}>
                  Î¨¥Î£å ÌîåÎûú ÏÇ¨Ïö©ÏûêÎäî Îß§Ïùº ÏûêÏ†ïÏóê 10Í∞úÏùò ÌÜ†ÌÅ∞Ïù¥ ÏûêÎèô Ï∂©Ï†ÑÎê©ÎãàÎã§
                </Text>
              </View>

              <View style={styles.premiumNotice}>
                <Icon name="workspace-premium" size={20} color={colors.primary} />
                <Text style={styles.premiumNoticeText}>
                  {realSubscriptionPlan === 'free' ? 'Î¨¥Î£å ÌöåÏõêÏùÄ Îß§Ïùº 10Í∞úÏùò ÌÜ†ÌÅ∞Ïù¥ ÏûêÎèô Ï∂©Ï†ÑÎê©ÎãàÎã§' : 
                   realSubscriptionPlan === 'starter' ? 'STARTER ÌöåÏõêÏùÄ Í∞ÄÏûÖ Ïãú 300Í∞ú + Îß§Ïùº 10Í∞úÏî© Ï∂îÍ∞Ä ÌÜ†ÌÅ∞ÏùÑ Î∞õÏäµÎãàÎã§' : 
                   realSubscriptionPlan === 'premium' ? 'PRO ÌöåÏõêÏùÄ Í∞ÄÏûÖ Ïãú 500Í∞ú + Îß§Ïùº 20Í∞úÏî© Ï∂îÍ∞Ä ÌÜ†ÌÅ∞ÏùÑ Î∞õÏäµÎãàÎã§' : 
                   'MAX ÌöåÏõêÏùÄ Î¨¥Ï†úÌïú ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§'}
                </Text>
              </View>
            </View>
          </>
        ) : null}

        <View style={styles.bottomSpace} />
      </ScrollView>

      {/* ÌïòÎã® Î≤ÑÌäº Ï†úÍ±∞ - Í∞Å Ïπ¥ÎìúÏóê Î≤ÑÌäº Ï∂îÍ∞ÄÎê® */}
      
      <EarnTokenModal
        visible={showEarnTokenModal}
        onClose={() => {
          setShowEarnTokenModal(false);
          loadTokenStats();
        }}
        onTokensEarned={handleEarnTokens}
      />
    </SafeAreaView>
  );
};

const createStyles = (colors: any, isDark: boolean) => {
  const cardShadow = isDark ? {
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  } : {
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.08,
    shadowRadius: 12,
    elevation: 4,
  };

  return StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    header: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: SPACING.medium,
      paddingVertical: SPACING.medium,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
    },
    backButton: {
      width: 40,
      height: 40,
      justifyContent: 'center',
      alignItems: 'center',
    },
    headerTitle: {
      fontSize: 18,
      fontWeight: '600',
      color: colors.text.primary,
    },
    content: {
      flex: 1,
    },
    headerButton: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.primary + '20',
      paddingHorizontal: 12,
      paddingVertical: 6,
      borderRadius: 16,
      gap: 4,
    },
    currentTokens: {
      fontSize: 14,
      fontWeight: '700',
      color: colors.primary,
    },
    tokenInfoBanner: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.primary + '10',
      marginHorizontal: SPACING.large,
      marginBottom: SPACING.large,
      padding: SPACING.medium,
      borderRadius: 12,
      gap: SPACING.small,
    },
    tokenInfoText: {
      fontSize: 13,
      color: colors.text.primary,
      flex: 1,
      lineHeight: 18,
    },
    earnTokensSection: {
      paddingHorizontal: SPACING.large,
    },
    earnTokensList: {
      gap: SPACING.small,
    },
    earnTokenItem: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.surface,
      padding: SPACING.medium,
      borderRadius: 12,
      gap: SPACING.medium,
      borderWidth: 1,
      borderColor: colors.border,
    },
    earnTokenIcon: {
      width: 44,
      height: 44,
      borderRadius: 22,
      justifyContent: 'center',
      alignItems: 'center',
    },
    earnTokenInfo: {
      flex: 1,
    },
    earnTokenTitle: {
      fontSize: 14,
      fontWeight: '600',
      color: colors.text.primary,
      marginBottom: 2,
    },
    earnTokenDesc: {
      fontSize: 12,
      color: colors.text.secondary,
    },
    earnTokenTip: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.surface,
      marginTop: SPACING.large,
      padding: SPACING.medium,
      borderRadius: 12,
      gap: SPACING.small,
      borderWidth: 1,
      borderColor: colors.border,
    },
    earnTokenTipText: {
      fontSize: 13,
      color: colors.text.secondary,
      flex: 1,
      lineHeight: 18,
    },
    premiumNotice: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.primary + '10',
      marginTop: SPACING.medium,
      padding: SPACING.medium,
      borderRadius: 12,
      gap: SPACING.small,
    },
    premiumNoticeText: {
      fontSize: 13,
      color: colors.primary,
      flex: 1,
      lineHeight: 18,
      fontWeight: '500',
    },
    heroSection: {
      paddingHorizontal: SPACING.large,
      paddingTop: SPACING.large,
      paddingBottom: SPACING.xl,
    },
    heroTitle: {
      fontSize: 28,
      fontWeight: '700',
      color: colors.text.primary,
      lineHeight: 36,
      marginBottom: SPACING.small,
    },
    heroSubtitle: {
      fontSize: 16,
      color: colors.text.secondary,
      lineHeight: 24,
    },
    plansContainer: {
      paddingHorizontal: SPACING.medium,
      gap: SPACING.medium,
    },
    planCard: {
      backgroundColor: colors.surface,
      borderRadius: 16,
      padding: SPACING.large,
      marginBottom: SPACING.medium,
      borderWidth: 2,
      borderColor: colors.border,
      position: 'relative',
    },
    selectedPlanCard: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 4 },
      shadowOpacity: 0.15,
      shadowRadius: 12,
      elevation: 5,
    },
    downgradePlanCard: {
      opacity: 0.6,
      borderColor: colors.border,
    },
    popularBadge: {
      position: 'absolute',
      top: -10,
      right: 20,
      paddingHorizontal: 12,
      paddingVertical: 4,
      borderRadius: 12,
    },
    popularBadgeText: {
      color: '#FFFFFF',
      fontSize: 12,
      fontWeight: '600',
    },
    planHeader: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: SPACING.small,
    },
    planTitleRow: {
      flexDirection: 'row',
      alignItems: 'center',
      gap: SPACING.small,
    },
    planName: {
      fontSize: 20,
      fontWeight: '700',
    },
    currentBadge: {
      backgroundColor: colors.lightGray,
      paddingHorizontal: 8,
      paddingVertical: 4,
      borderRadius: 8,
    },
    currentBadgeText: {
      fontSize: 11,
      color: colors.text.secondary,
      fontWeight: '500',
    },
    selectedCheckmark: {
      width: 24,
      height: 24,
      borderRadius: 12,
      justifyContent: 'center',
      alignItems: 'center',
    },
    priceContainer: {
      flexDirection: 'row',
      alignItems: 'baseline',
      marginBottom: SPACING.medium,
    },
    price: {
      fontSize: 32,
      fontWeight: '700',
      color: colors.text.primary,
    },
    priceUnit: {
      fontSize: 16,
      color: colors.text.secondary,
      marginLeft: 4,
    },
    tokenInfo: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: 12,
      paddingVertical: 8,
      borderRadius: 8,
      marginBottom: SPACING.medium,
      gap: 6,
    },
    tokenText: {
      fontSize: 14,
      fontWeight: '600',
    },
    features: {
      gap: SPACING.small,
    },
    featureItem: {
      flexDirection: 'row',
      alignItems: 'center',
      gap: SPACING.small,
    },
    featureText: {
      fontSize: 14,
      color: colors.text.secondary,
      flex: 1,
    },
    benefitsSection: {
      marginTop: SPACING.xl,
      paddingHorizontal: SPACING.large,
    },
    sectionTitle: {
      fontSize: 20,
      fontWeight: '700',
      color: colors.text.primary,
      marginBottom: SPACING.xs,
    },
    benefitCard: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.surface,
      padding: SPACING.medium,
      borderRadius: 12,
      marginBottom: SPACING.small,
      gap: SPACING.medium,
    },
    benefitIcon: {
      width: 48,
      height: 48,
      borderRadius: 12,
      justifyContent: 'center',
      alignItems: 'center',
    },
    benefitContent: {
      flex: 1,
    },
    benefitTitle: {
      fontSize: 15,
      fontWeight: '600',
      color: colors.text.primary,
      marginBottom: 4,
    },
    benefitDesc: {
      fontSize: 13,
      color: colors.text.secondary,
      lineHeight: 18,
    },
    bottomSpace: {
      height: 40,
    },
    subscriptionManagement: {
      marginTop: SPACING.xl,
      marginHorizontal: SPACING.large,
      padding: SPACING.large,
      backgroundColor: colors.surface,
      borderRadius: 16,
      borderWidth: 1,
      borderColor: colors.border,
    },
    subscriptionInfoCard: {
      backgroundColor: colors.background,
      borderRadius: 12,
      padding: SPACING.medium,
      marginBottom: SPACING.large,
      borderWidth: 1,
      borderColor: colors.border,
    },
    planInfoRow: {
      flexDirection: 'row',
      alignItems: 'center',
      marginBottom: SPACING.medium,
    },
    planInfoItem: {
      flex: 1,
      alignItems: 'center',
    },
    planInfoLabel: {
      fontSize: 13,
      color: colors.text.secondary,
      marginBottom: 4,
    },
    planInfoValue: {
      fontSize: 16,
      fontWeight: '600',
      color: colors.text.primary,
    },
    planInfoDivider: {
      width: 1,
      height: 30,
      backgroundColor: colors.border,
      marginHorizontal: SPACING.medium,
    },
    expiryInfoContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: colors.primary + '10',
      padding: SPACING.medium,
      borderRadius: 8,
      gap: SPACING.small,
    },
    expiryTextContainer: {
      flex: 1,
    },
    expiryLabel: {
      fontSize: 12,
      color: colors.text.secondary,
      marginBottom: 2,
    },
    expiryDate: {
      fontSize: 16,
      fontWeight: '600',
      color: colors.primary,
      marginBottom: 2,
    },
    daysRemaining: {
      fontSize: 13,
      color: colors.primary,
      opacity: 0.8,
    },
    autoRenewInfo: {
      flexDirection: 'row',
      alignItems: 'center',
      gap: 6,
      marginTop: SPACING.small,
      paddingTop: SPACING.small,
      borderTopWidth: 1,
      borderTopColor: colors.border,
    },
    autoRenewText: {
      fontSize: 13,
      color: colors.text.secondary,
    },
    currentPlanInfo: {
      flexDirection: 'row',
      alignItems: 'center',
      gap: SPACING.small,
      marginBottom: SPACING.large,
    },
    currentPlanText: {
      fontSize: 15,
      color: colors.text.primary,
      flex: 1,
    },
    cancelButton: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      gap: SPACING.small,
      backgroundColor: colors.error ? colors.error + '10' : '#FF3B3010',
      paddingVertical: 14,
      paddingHorizontal: 24,
      borderRadius: 12,
      borderWidth: 1,
      borderColor: colors.error || '#FF3B30',
      marginBottom: SPACING.medium,
    },
    cancelButtonText: {
      fontSize: 16,
      fontWeight: '600',
      color: colors.error || '#FF3B30',
    },
    cancelInfo: {
      fontSize: 13,
      color: colors.text.secondary,
      textAlign: 'center',
      lineHeight: 18,
    },
    cardPurchaseButton: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 14,
      borderRadius: 10,
      marginTop: SPACING.medium,
      gap: 8,
    },
    cardPurchaseButtonDisabled: {
      borderWidth: 1,
      borderColor: colors.border,
    },
    cardPurchaseButtonText: {
      color: '#FFFFFF',
      fontSize: 15,
      fontWeight: '600',
    },
    cardPurchaseButtonTextDisabled: {
      color: colors.text.secondary,
    },
    bottomCTA: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      backgroundColor: colors.background,
      paddingHorizontal: SPACING.medium,
      paddingTop: SPACING.medium,
      paddingBottom: SPACING.large,
      borderTopWidth: 1,
      borderTopColor: colors.border,
    },
    subscribeButton: {
      paddingVertical: 16,
      borderRadius: 12,
      alignItems: 'center',
      marginBottom: SPACING.small,
    },
    subscribeButtonContent: {
      alignItems: 'center',
    },
    subscribeButtonText: {
      color: '#FFFFFF',
      fontSize: 16,
      fontWeight: '600',
      marginBottom: 2,
    },
    subscribeButtonPrice: {
      color: 'rgba(255, 255, 255, 0.9)',
      fontSize: 14,
      fontWeight: '500',
    },
    legalText: {
      fontSize: 12,
      color: colors.text.tertiary,
      textAlign: 'center',
    },
    tabContainer: {
      flexDirection: 'row',
      paddingHorizontal: SPACING.medium,
      paddingVertical: SPACING.small,
      gap: SPACING.small,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
    },
    tabButton: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: SPACING.small,
      borderRadius: 8,
      gap: 6,
    },
    activeTab: {
      backgroundColor: colors.primary + '15',
    },
    tabText: {
      fontSize: 14,
      fontWeight: '500',
      color: colors.text.secondary,
    },
    activeTabText: {
      color: colors.primary,
      fontWeight: '600',
    },
  });
};

export default ModernSubscriptionScreen;
