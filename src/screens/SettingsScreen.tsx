import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  Switch,
  Alert,
  Linking,
  Platform as RNPlatform,
  ActivityIndicator,
  Image,
} from 'react-native';
import { User, Platform } from '../types';
import { COLORS, FONTS, SPACING, BORDER_RADIUS, PLATFORMS, BRAND, CARD_THEME, TYPOGRAPHY, FONT_SIZES } from '../utils/constants';
import Icon from 'react-native-vector-icons/Ionicons';
import MaterialIcon from 'react-native-vector-icons/MaterialIcons';
import { APP_TEXT } from '../utils/textConstants';
import { useAppTheme } from '../hooks/useAppTheme';
import { storage } from '../utils/storage';
import socialMediaService from '../services/socialMediaService';
import ProfileEditModal from '../components/ProfileEditModal';
import AsyncStorage from '@react-native-async-storage/async-storage';
import socialAuthService from '../services/auth/socialAuthService';
import { useAppSelector, useAppDispatch } from '../hooks/redux';
import { resetUser } from '../store/slices/userSlice';
import { UserGuideScreen, TermsOfServiceScreen, PrivacyPolicyScreen, ContactScreen } from './documents';
import FirebaseTestScreen from './FirebaseTestScreen';
import { soundManager } from '../utils/soundManager';
import tokenService from '../services/subscription/tokenService';
import inAppPurchaseService from '../services/subscription/inAppPurchaseService';
import TokenManagementSection from '../components/token/TokenManagementSection';
import { resetAllMissionData, resetAdData, debugMissionData } from '../utils/missionUtils';

interface SettingsScreenProps {
  onNavigate?: (tab: string) => void;
  onFirebaseTest?: () => void;
}

const SettingsScreen: React.FC<SettingsScreenProps> = ({ onNavigate, onFirebaseTest }) => {
  const { themeMode, changeTheme, colors, cardTheme } = useAppTheme();
  const dispatch = useAppDispatch();
  const reduxUser = useAppSelector(state => state.user);
  const [user, setUser] = useState<User>({
    id: '1',
    name: 'ÍπÄÌè¨Ïä§Ìã∞',
    email: 'posty@example.com',
    connectedPlatforms: [],
    preferences: {
      defaultPlatform: 'instagram',
      autoSchedule: true,
      notificationsEnabled: true,
      aiRecommendationFrequency: 'medium',
      preferredPostingTimes: ['09:00', '19:00'],
    },
  });

  const [pushEnabled, setPushEnabled] = useState(true);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [vibrationEnabled, setVibrationEnabled] = useState(true);
  const [profileEditVisible, setProfileEditVisible] = useState(false);
  const [connectedAccounts, setConnectedAccounts] = useState<Record<string, boolean>>({});
  const [subscriptionPlan, setSubscriptionPlan] = useState('free');
  const [showUserGuide, setShowUserGuide] = useState(false);
  const [showTerms, setShowTerms] = useState(false);
  const [showPrivacy, setShowPrivacy] = useState(false);
  const [showContact, setShowContact] = useState(false);
  const [loading, setLoading] = useState(true);
  const [showFirebaseTest, setShowFirebaseTest] = useState(false);
  const [showEarnTokenModal, setShowEarnTokenModal] = useState(false);
  
  // AI ÌÜ†ÌÅ∞ Î∞è ÌÜµÍ≥Ñ
  const [stats, setStats] = useState({
    todayGenerated: 0,
    weeklyGenerated: 0,
    monthlyGenerated: 0,
    totalSaved: 0,
    aiTokensRemaining: 10,
    aiTokensTotal: 10,
    joinDays: 0,
  });

  useEffect(() => {
    loadAllData();
  }, []);

  // Redux ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú ÌÜ†ÌÅ∞ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (reduxUser.tokens?.current !== undefined) {
      setStats(prev => ({
        ...prev,
        aiTokensRemaining: reduxUser.tokens.current,
      }));
    }
  }, [reduxUser.tokens]); // Redux ÌÜ†ÌÅ∞ Ï†ïÎ≥¥Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏

  const loadAllData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadUserData(),
        loadSettings(),
        loadStats(),
      ]);
    } finally {
      setLoading(false);
    }
  };

  const loadUserData = async () => {
    try {
      const savedUser = await storage.getUser();
      if (savedUser) {
        setUser(savedUser);
      }

      // Ïó∞Í≤∞Îêú Í≥ÑÏ†ï ÌôïÏù∏
      const tokens = await socialMediaService.getAccessTokens();
      setConnectedAccounts({
        instagram: !!tokens.instagram,
        facebook: !!tokens.facebook,
        naver: false, // TODO: ÎÑ§Ïù¥Î≤Ñ OAuth Íµ¨ÌòÑ ÌïÑÏöî
        kakao: false, // TODO: Ïπ¥Ïπ¥Ïò§ OAuth Íµ¨ÌòÑ ÌïÑÏöî
        linkedin: false,
        twitter: false,
      });

      // Íµ¨ÎèÖ Ï†ïÎ≥¥ Î°úÎìú
      const plan = await AsyncStorage.getItem('subscription_plan');
      setSubscriptionPlan(plan || 'free');
    } catch (error) {
      console.error('Failed to load user data:', error);
    }
  };

  const loadSettings = async () => {
    try {
      const pushSetting = await AsyncStorage.getItem('push_notifications_enabled');
      if (pushSetting !== null) {
        setPushEnabled(pushSetting === 'true');
      }
      
      const soundSetting = await AsyncStorage.getItem('sound_enabled');
      if (soundSetting !== null) {
        const enabled = soundSetting === 'true';
        setSoundEnabled(enabled);
        soundManager.setSoundEnabled(enabled);
      }
      
      const vibrationSetting = await AsyncStorage.getItem('vibration_enabled');
      if (vibrationSetting !== null) {
        const enabled = vibrationSetting === 'true';
        setVibrationEnabled(enabled);
        soundManager.setVibrationEnabled(enabled);
      }
    } catch (error) {
      console.error('Failed to load settings:', error);
    }
  };

  const loadStats = async () => {
    try {
      // Í∞ÄÏûÖÏùº Í≥ÑÏÇ∞
      const joinDateStr = await AsyncStorage.getItem('posty_join_date');
      const joinDate = joinDateStr ? new Date(joinDateStr) : new Date();
      if (!joinDateStr) {
        await AsyncStorage.setItem('posty_join_date', joinDate.toISOString());
      }
      const diffTime = Math.abs(new Date().getTime() - joinDate.getTime());
      const joinDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      // Ïò§Îäò ÌÜµÍ≥Ñ
      const today = new Date().toDateString();
      const todayStats = await AsyncStorage.getItem(`stats_${today}`);
      const parsedStats = todayStats ? JSON.parse(todayStats) : { generated: 0 };
      
      // tokenServiceÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïã§Ï†ú ÌÜ†ÌÅ∞ Ïàò Í∞ÄÏ†∏Ïò§Í∏∞
      const subscription = await tokenService.getSubscription();
      const tokenInfo = await tokenService.getTokenInfo();
      
      // Redux ÏÉÅÌÉúÏóêÏÑú ÌÜ†ÌÅ∞ Ï†ïÎ≥¥ ÌôïÏù∏ (Ïö∞ÏÑ†)
      const reduxTokens = reduxUser.tokens?.current;
      
      // Ïã§Ï†ú ÎÇ®ÏùÄ ÌÜ†ÌÅ∞ Ïàò Í≥ÑÏÇ∞
      let remainingTokens = 0;
      let tokensTotal = 10;
      
      if (subscription.plan === 'pro') {
        // ÌîÑÎ°ú ÌîåÎûúÏùÄ Î¨¥Ï†úÌïú
        tokensTotal = 999;
        remainingTokens = 999;
      } else if (subscription.plan === 'premium') {
        // ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌîåÎûú
        tokensTotal = 100;
        remainingTokens = reduxTokens !== undefined ? reduxTokens : (subscription.monthlyTokensRemaining || 0);
      } else {
        // Free ÌîåÎûú
        tokensTotal = 10;
        // Redux ÏÉÅÌÉúÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ daily tokens ÏÇ¨Ïö©
        if (reduxTokens !== undefined) {
          remainingTokens = reduxTokens;
        } else {
          remainingTokens = subscription.dailyTokens || 10;
        }
      }
      
      setStats({
        todayGenerated: parsedStats.generated || 0,
        weeklyGenerated: 18,
        monthlyGenerated: 127,
        totalSaved: 45,
        aiTokensRemaining: remainingTokens,
        aiTokensTotal: tokensTotal,
        joinDays,
      });
      
      // Íµ¨ÎèÖ ÌîåÎûúÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
      setSubscriptionPlan(subscription.plan);
    } catch (error) {
      console.error('Failed to load stats:', error);
      // Ïò§Î•ò Ïãú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
      setStats({
        todayGenerated: 0,
        weeklyGenerated: 0,
        monthlyGenerated: 0,
        totalSaved: 0,
        aiTokensRemaining: reduxUser.tokens?.current || 10,
        aiTokensTotal: 10,
        joinDays: 0,
      });
    }
  };

  const handlePushToggle = async (value: boolean) => {
    setPushEnabled(value);
    try {
      await AsyncStorage.setItem('push_notifications_enabled', value.toString());
      
      if (value) {
        Alert.alert(
          'Posty',
          'ÏïåÎ¶ºÏùÑ Ïº∞Ïñ¥Ïöî! Ï§ëÏöîÌïú ÏÜåÏãùÏùÑ ÎÜìÏπòÏßÄ ÏïäÎèÑÎ°ù ÎèÑÏôÄÎìúÎ¶¥Í≤åÏöî üîî'
        );
      } else {
        Alert.alert(
          'Posty',
          'ÏïåÎ¶ºÏùÑ ÎÅÑÏÖ®ÎÑ§Ïöî. Ïñ∏Ï†úÎì† Îã§Ïãú ÏºúÏã§ Ïàò ÏûàÏñ¥Ïöî üòä'
        );
      }
    } catch (error) {
      console.error('Failed to save push setting:', error);
    }
  };

  const handleSoundToggle = async (value: boolean) => {
    setSoundEnabled(value);
    soundManager.setSoundEnabled(value);
    
    try {
      await AsyncStorage.setItem('sound_enabled', value.toString());
      
      if (value) {
        soundManager.playTap();
        Alert.alert(
          'Posty',
          'ÏÇ¨Ïö¥ÎìúÎ•º Ïº∞Ïñ¥Ïöî! Î≤ÑÌäºÏùÑ ÎàÑÎ•º ÎïåÎßàÎã§ ÏÜåÎ¶¨Í∞Ä ÎÇ† Í±∞ÏòàÏöî üîä'
        );
      }
    } catch (error) {
      console.error('Failed to save sound setting:', error);
    }
  };

  const handleVibrationToggle = async (value: boolean) => {
    setVibrationEnabled(value);
    soundManager.setVibrationEnabled(value);
    
    try {
      await AsyncStorage.setItem('vibration_enabled', value.toString());
      
      if (value) {
        soundManager.haptic('medium');
        Alert.alert(
          'Posty',
          'ÏßÑÎèôÏùÑ Ïº∞Ïñ¥Ïöî! ÌÑ∞ÏπòÌï† ÎïåÎßàÎã§ ÏßÑÎèô ÌîºÎìúÎ∞±ÏùÑ ÎäêÎÇÑ Ïàò ÏûàÏñ¥Ïöî üì≥'
        );
      }
    } catch (error) {
      console.error('Failed to save vibration setting:', error);
    }
  };

  const handleThemeChange = async (theme: 'light' | 'dark' | 'system') => {
    changeTheme(theme);
    try {
      await AsyncStorage.setItem('app_theme', theme);
    } catch (error) {
      console.error('Failed to save theme setting:', error);
    }
  };

  const handleConnectPlatform = async (platform: string) => {
    Alert.alert(
      `${platform} Ïó∞Í≤∞`,
      `${platform} Í≥ÑÏ†ïÏùÑ Ïó∞Í≤∞ÌïòÏãúÍ≤†Ïñ¥Ïöî?`,
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Ïó∞Í≤∞ÌïòÍ∏∞',
          onPress: async () => {
            Alert.alert(
              'Posty',
              `${platform} Ïó∞Í≤∞ Í∏∞Îä•ÏùÄ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏù¥ÏóêÏöî! Ï°∞Í∏àÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî üöÄ`
            );
          },
        },
      ]
    );
  };

  const handleDisconnectPlatform = async (platform: string) => {
    Alert.alert(
      'Ïó∞Í≤∞ Ìï¥Ï†ú',
      `Ï†ïÎßê ${platform} Ïó∞Í≤∞ÏùÑ Ìï¥Ï†úÌïòÏãúÍ≤†Ïñ¥Ïöî?`,
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Ìï¥Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              const tokens = await socialMediaService.getAccessTokens();
              delete tokens[platform.toLowerCase() as keyof typeof tokens];
              await AsyncStorage.setItem('SOCIAL_MEDIA_TOKENS', JSON.stringify(tokens));
              
              setConnectedAccounts(prev => ({
                ...prev,
                [platform.toLowerCase()]: false,
              }));

              Alert.alert(
                'Posty',
                `${platform} Ïó∞Í≤∞Ïù¥ Ìï¥Ï†úÎêòÏóàÏñ¥Ïöî. Ïñ∏Ï†úÎì† Îã§Ïãú Ïó∞Í≤∞Ìï† Ïàò ÏûàÏñ¥Ïöî!`
              );
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Ïó∞Í≤∞ Ìï¥Ï†úÏóê Ïã§Ìå®ÌñàÏñ¥Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
            }
          },
        },
      ]
    );
  };

  const handleEditProfile = () => {
    setProfileEditVisible(true);
  };

  const handleSaveProfile = (profile: { name: string; email: string }) => {
    setUser(prev => ({ ...prev, ...profile }));
  };

  const handleUpgradePlan = () => {
    if (onNavigate) {
      onNavigate('subscription');
    }
  };

  const handleRestorePurchases = async () => {
    try {
      Alert.alert(
        'Íµ¨Îß§ Î≥µÏõê',
        'Ïù¥Ï†ÑÏóê Íµ¨Îß§Ìïú Íµ¨ÎèÖÏùÑ Î≥µÏõêÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        [
          { text: 'Ï∑®ÏÜå', style: 'cancel' },
          {
            text: 'Î≥µÏõêÌïòÍ∏∞',
            onPress: async () => {
              try {
                await inAppPurchaseService.restorePurchases();
              } catch (error) {
                console.error('Restore error:', error);
                Alert.alert(
                  'Î≥µÏõê Ïã§Ìå®',
                  'Íµ¨Îß§ Î≥µÏõêÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
                  [{ text: 'ÌôïÏù∏' }]
                );
              }
            },
          },
        ]
      );
    } catch (error) {
      console.error('Restore purchases error:', error);
    }
  };

  const handleClearHistory = () => {
    Alert.alert(
      'ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú',
      'ÏÉùÏÑ± Î∞è ÌôúÎèô Í∏∞Î°ùÏùÑ Î™®Îëê ÏÇ≠Ï†úÌïòÏãúÍ≤†Ïñ¥Ïöî?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              const keys = await AsyncStorage.getAllKeys();
              const historyKeys = keys.filter(key => 
                key.includes('stats_') || 
                key.includes('history_') || 
                key.includes('activity_')
              );
              await AsyncStorage.multiRemove(historyKeys);
              
              Alert.alert('ÏôÑÎ£å', 'ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
              loadStats();
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };

  const handleDeleteAllData = () => {
    Alert.alert(
      'Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
      'Ï†ïÎßê Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†Ïñ¥Ïöî?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              const keys = await AsyncStorage.getAllKeys();
              await AsyncStorage.multiRemove(keys);
              
              Alert.alert(
                'ÏôÑÎ£å',
                'Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
                [{ text: 'ÌôïÏù∏', onPress: () => loadAllData() }]
              );
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };

  const handleLogout = () => {
    Alert.alert(
      'Î°úÍ∑∏ÏïÑÏõÉ',
      'Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†Ïñ¥Ïöî?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Î°úÍ∑∏ÏïÑÏõÉ',
          style: 'destructive',
          onPress: async () => {
            try {
              // ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î°úÍ∑∏ÏïÑÏõÉ
              await socialAuthService.signOut();
              
              // Redux ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
              dispatch(resetUser());
              
              // Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
              if (onNavigate) {
                onNavigate('login');
              }
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏñ¥Ïöî.');
            }
          },
        },
      ]
    );
  };

  const handleOpenHelp = () => {
    setShowUserGuide(true);
  };

  const handleRateApp = () => {
    Alert.alert(
      'Ïï± ÌèâÍ∞ÄÌïòÍ∏∞',
      'PostyÍ∞Ä ÎèÑÏõÄÏù¥ ÎêòÏÖ®ÎÇòÏöî? ÌèâÍ∞ÄÎ•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî!',
      [
        { text: 'ÎÇòÏ§ëÏóê', style: 'cancel' },
        {
          text: 'ÌèâÍ∞ÄÌïòÎü¨ Í∞ÄÍ∏∞',
          onPress: () => {
            const storeUrl = RNPlatform.OS === 'ios'
              ? 'https://apps.apple.com/app/posty-ai'
              : 'https://play.google.com/store/apps/details?id=com.posty.ai';
            
            Linking.openURL(storeUrl).catch(() => {
              Alert.alert('Ïò§Î•ò', 'Ïä§ÌÜ†Ïñ¥Î•º Ïó¥ Ïàò ÏóÜÏñ¥Ïöî.');
            });
          },
        },
      ]
    );
  };

  const handleEarnTokens = async (tokens: number) => {
    try {
      // ÌÜ†ÌÅ∞ Ï∂îÍ∞Ä
      const subscription = await tokenService.getSubscription();
      
      // ÌïòÎ£® ÏµúÎåÄ ÌÜ†ÌÅ∞ Ï†úÌïú ÌôïÏù∏
      const today = new Date().toDateString();
      const earnedTodayKey = `earned_tokens_${today}`;
      const earnedToday = await AsyncStorage.getItem(earnedTodayKey);
      const totalEarnedToday = earnedToday ? parseInt(earnedToday) : 0;
      
      // ÌïòÎ£® ÏµúÎåÄ 20Í∞úÍπåÏßÄÎßå Ï∂îÍ∞Ä ÌöçÎìù Í∞ÄÎä• (Í∏∞Î≥∏ 10Í∞ú + Ï∂îÍ∞Ä 20Í∞ú = Ï¥ù 30Í∞ú)
      const MAX_DAILY_EARNED = 20;
      if (totalEarnedToday >= MAX_DAILY_EARNED) {
        Alert.alert(
          'ÏùºÏùº ÌïúÎèÑ Ï¥àÍ≥º',
          `Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ ÏµúÎåÄ ${MAX_DAILY_EARNED}Í∞úÏùò Ï∂îÍ∞Ä ÌÜ†ÌÅ∞ÏùÑ ÌöçÎìùÌñàÏñ¥Ïöî.\nÎÇ¥Ïùº Îã§Ïãú ÎèÑÏ†ÑÌï¥Ï£ºÏÑ∏Ïöî!`,
          [{ text: 'ÌôïÏù∏' }]
        );
        return;
      }
      
      // ÎÇ®ÏùÄ ÌöçÎìù Í∞ÄÎä•Ìïú ÌÜ†ÌÅ∞ Í≥ÑÏÇ∞
      const remainingEarnable = MAX_DAILY_EARNED - totalEarnedToday;
      const actualTokensToAdd = Math.min(tokens, remainingEarnable);
      
      if (actualTokensToAdd < tokens) {
        Alert.alert(
          'Î∂ÄÎ∂Ñ ÏßÄÍ∏â',
          `ÏùºÏùº ÌïúÎèÑÎ°ú Ïù∏Ìï¥ ${actualTokensToAdd}Í∞úÎßå ÏßÄÍ∏âÎê©ÎãàÎã§.`,
          [{ text: 'ÌôïÏù∏' }]
        );
      }
      
      // ÌÜ†ÌÅ∞ Ï∂îÍ∞Ä
      subscription.dailyTokens = Math.min(
        subscription.dailyTokens + actualTokensToAdd, 
        30 // Ï†ÑÏ≤¥ ÏµúÎåÄ 30Í∞ú
      );
      
      // Ïò§Îäò ÌöçÎìùÌïú ÌÜ†ÌÅ∞ Í∏∞Î°ù
      await AsyncStorage.setItem(
        earnedTodayKey, 
        (totalEarnedToday + actualTokensToAdd).toString()
      );
      
      // ÎπÑÏ†ïÏÉÅ Ìå®ÌÑ¥ Î™®ÎãàÌÑ∞ÎßÅÏùÑ ÏúÑÌïú Î°úÍ∑∏ Ï†ÄÏû•
      await logTokenActivity({
        action: 'earn',
        amount: actualTokensToAdd,
        source: 'modal',
        timestamp: new Date().toISOString(),
      });
      
      await AsyncStorage.setItem('USER_SUBSCRIPTION', JSON.stringify(subscription));
      
      // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
      await loadStats();
      
      // ÌôîÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®
      setTimeout(() => {
        setShowEarnTokenModal(false);
      }, 1000);
    } catch (error) {
      console.error('Failed to add tokens:', error);
    }
  };

  // ÌÜ†ÌÅ∞ ÌôúÎèô Î°úÍπÖ (ÎπÑÏ†ïÏÉÅ Ìå®ÌÑ¥ Î™®ÎãàÌÑ∞ÎßÅÏö©)
  const logTokenActivity = async (activity: any) => {
    try {
      const logsKey = 'token_activity_logs';
      const existingLogs = await AsyncStorage.getItem(logsKey);
      const logs = existingLogs ? JSON.parse(existingLogs) : [];
      
      logs.push(activity);
      
      // ÏµúÍ∑º 100Í∞ú Î°úÍ∑∏Îßå Ïú†ÏßÄ
      if (logs.length > 100) {
        logs.splice(0, logs.length - 100);
      }
      
      await AsyncStorage.setItem(logsKey, JSON.stringify(logs));
      
      // ÎπÑÏ†ïÏÉÅ Ìå®ÌÑ¥ Ï≤¥ÌÅ¨
      checkAnomalousPatterns(logs);
    } catch (error) {
      console.error('Failed to log activity:', error);
    }
  };
  
  // ÎπÑÏ†ïÏÉÅ Ìå®ÌÑ¥ Í∞êÏßÄ
  const checkAnomalousPatterns = (logs: any[]) => {
    const recentLogs = logs.filter(log => {
      const logTime = new Date(log.timestamp).getTime();
      const now = new Date().getTime();
      return now - logTime < 3600000; // ÏµúÍ∑º 1ÏãúÍ∞Ñ
    });
    
    // Ìå®ÌÑ¥ 1: ÎÑàÎ¨¥ ÎπàÎ≤àÌïú ÏöîÏ≤≠ (1ÏãúÍ∞ÑÏóê 10Î≤à Ïù¥ÏÉÅ)
    if (recentLogs.length > 10) {
      console.warn('Suspicious pattern detected: Too many token requests');
      // Ïã§Ï†úÎ°úÎäî ÏÑúÎ≤ÑÏóê Î¶¨Ìè¨Ìä∏ÌïòÍ±∞ÎÇò Í≥ÑÏ†ï ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï
    }
    
    // Ìå®ÌÑ¥ 2: ÎèôÏùºÌïú ÏûëÏóÖ Î∞òÎ≥µ (Í∞ôÏùÄ ÏÜåÏä§ÏóêÏÑú 5Î≤à Ïù¥ÏÉÅ)
    const sourceCounts = recentLogs.reduce((acc, log) => {
      acc[log.source] = (acc[log.source] || 0) + 1;
      return acc;
    }, {});
    
    Object.entries(sourceCounts).forEach(([source, count]) => {
      if (count > 5) {
        console.warn(`Suspicious pattern detected: Repeated ${source} actions`);
      }
    });
  };

  const getSubscriptionBadge = () => {
    switch (subscriptionPlan) {
      case 'pro':
        return { text: 'PRO', color: '#8B5CF6', icon: 'crown' };
      case 'premium':
        return { text: 'PREMIUM', color: '#F59E0B', icon: 'star' };
      default:
        return { text: 'FREE', color: colors.text.secondary, icon: 'person' };
    }
  };

  const platformsData = [
    {
      id: 'instagram',
      name: 'Instagram',
      username: connectedAccounts.instagram ? '@username' : 'Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå',
      color: '#E4405F',
      connected: connectedAccounts.instagram,
      status: connectedAccounts.instagram ? 'Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ÌïòÍ∏∞',
    },
    {
      id: 'facebook',
      name: 'Facebook',
      username: connectedAccounts.facebook ? 'Í∞úÏù∏ Í≥ÑÏ†ï' : 'Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå',
      color: '#1877F2',
      connected: connectedAccounts.facebook,
      status: connectedAccounts.facebook ? 'Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ÌïòÍ∏∞',
    },
    {
      id: 'naver',
      name: 'ÎÑ§Ïù¥Î≤Ñ',
      username: connectedAccounts.naver ? 'Í≥ÑÏ†ï Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå',
      color: '#03C75A',
      connected: connectedAccounts.naver,
      status: connectedAccounts.naver ? 'Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ÌïòÍ∏∞',
    },
    {
      id: 'kakao',
      name: 'Ïπ¥Ïπ¥Ïò§',
      username: connectedAccounts.kakao ? 'Í≥ÑÏ†ï Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå',
      color: '#FEE500',
      connected: connectedAccounts.kakao,
      status: connectedAccounts.kakao ? 'Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ÌïòÍ∏∞',
    },
    {
      id: 'linkedin',
      name: 'LinkedIn',
      username: 'Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå',
      color: '#0077B5',
      connected: false,
      status: 'Ïó∞Í≤∞ÌïòÍ∏∞',
    },
    {
      id: 'twitter',
      name: 'X (Twitter)',
      username: 'Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå',
      color: '#000000',
      connected: false,
      status: 'Ïó∞Í≤∞ÌïòÍ∏∞',
    },
  ];

  const menuItems = [
    {
      icon: 'help-circle-outline',
      label: 'ÏÇ¨Ïö© Í∞ÄÏù¥Îìú',
      onPress: handleOpenHelp,
    },
    {
      icon: 'star-outline',
      label: 'Posty ÌèâÍ∞ÄÌïòÍ∏∞',
      onPress: handleRateApp,
    },
    {
      icon: 'mail-outline',
      label: 'Î¨∏ÏùòÌïòÍ∏∞',
      onPress: () => setShowContact(true),
    },
    {
      icon: 'document-text-outline',
      label: 'Ïù¥Ïö©ÏïΩÍ¥Ä',
      onPress: () => setShowTerms(true),
    },
    {
      icon: 'shield-checkmark-outline',
      label: 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®',
      onPress: () => setShowPrivacy(true),
    },
  ];

  const planBadge = getSubscriptionBadge();
  const styles = createStyles(colors, cardTheme);

  // Î¨∏ÏÑú ÌôîÎ©¥Îì§ Î†åÎçîÎßÅ
  if (showUserGuide) {
    return <UserGuideScreen onBack={() => setShowUserGuide(false)} onContact={() => {
      setShowUserGuide(false);
      setShowContact(true);
    }} />;
  }
  
  if (showTerms) {
    return <TermsOfServiceScreen onBack={() => setShowTerms(false)} />;
  }
  
  if (showPrivacy) {
    return <PrivacyPolicyScreen onBack={() => setShowPrivacy(false)} />;
  }
  
  if (showContact) {
    return <ContactScreen onBack={() => setShowContact(false)} />;
  }
  
  if (showFirebaseTest) {
    return <FirebaseTestScreen onNavigate={onNavigate} />;
  }

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.primary} />
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView
        style={styles.content}
        showsVerticalScrollIndicator={false}
      >
        {/* Ìó§Îçî */}
        <View style={styles.header}>
          <View style={styles.headerTop}>
            <View style={styles.mollyBadge}>
              <Text style={styles.mollyBadgeText}>P</Text>
            </View>
            <Text style={styles.headerTitle}>ÏÑ§Ï†ï</Text>
          </View>
        </View>

        {/* ÌîÑÎ°úÌïÑ Ïπ¥Îìú (ÌÜµÌï©) */}
        <View style={styles.section}>
          <View style={styles.profileCard}>
            <View style={styles.profileHeader}>
              <View style={styles.profileInfo}>
                <View style={styles.profileAvatar}>
                  {reduxUser.photoURL ? (
                    <Image source={{ uri: reduxUser.photoURL }} style={styles.profileAvatarImage} />
                  ) : (
                    <Text style={styles.profileAvatarText}>
                      {(reduxUser.displayName || user.name).charAt(0)}
                    </Text>
                  )}
                </View>
                <View style={styles.profileDetails}>
                  <Text style={styles.profileName}>{reduxUser.displayName || user.name}</Text>
                  <Text style={styles.profileEmail}>{reduxUser.email || user.email}</Text>
                  <View style={styles.planBadgeContainer}>
                    <MaterialIcon name={planBadge.icon} size={14} color={planBadge.color} />
                    <Text style={[styles.planBadgeText, { color: planBadge.color }]}>
                      {planBadge.text}
                    </Text>
                  </View>
                </View>
              </View>
              <TouchableOpacity style={styles.editButton} onPress={handleEditProfile}>
                <Icon name="create-outline" size={20} color={colors.text.secondary} />
              </TouchableOpacity>
            </View>



            {/* Í∞ÑÎã®Ìïú ÌÜµÍ≥Ñ */}
            <View style={styles.miniStats}>
              <View style={styles.miniStatItem}>
                <Text style={styles.miniStatValue}>{stats.todayGenerated}</Text>
                <Text style={styles.miniStatLabel}>Ïò§Îäò ÏÉùÏÑ±</Text>
              </View>
              <View style={styles.miniStatDivider} />
              <View style={styles.miniStatItem}>
                <Text style={styles.miniStatValue}>{stats.totalSaved}</Text>
                <Text style={styles.miniStatLabel}>Ï†ÄÏû•Îêú ÏΩòÌÖêÏ∏†</Text>
              </View>
              <View style={styles.miniStatDivider} />
              <View style={styles.miniStatItem}>
                <Text style={styles.miniStatValue}>{stats.joinDays}Ïùº</Text>
                <Text style={styles.miniStatLabel}>Ìï®ÍªòÌïú ÎÇ†</Text>
              </View>
            </View>

          </View>
        </View>

        {/* ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨ ÏÑπÏÖò */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨</Text>
          <TokenManagementSection 
            onNavigateToSubscription={handleUpgradePlan}
            onTokensUpdated={loadStats}
          />
        </View>

        {/* Í≥ÑÏ†ï Ïó∞Í≤∞ ÏÑπÏÖò */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>SNS Í≥ÑÏ†ï</Text>
          {platformsData.map((platform) => (
            <View key={platform.id} style={styles.platformItem}>
              <View style={styles.platformLeft}>
                <View style={[styles.platformIcon, { backgroundColor: platform.color }]}>
                  {platform.id === 'naver' ? (
                    <Text style={styles.platformIconText}>N</Text>
                  ) : platform.id === 'kakao' ? (
                    <Text style={[styles.platformIconText, { color: '#3C1E1E' }]}>K</Text>
                  ) : (
                    <Icon 
                      name={`logo-${platform.id}`} 
                      size={20} 
                      color="#FFFFFF" 
                    />
                  )}
                </View>
                <View style={styles.platformInfo}>
                  <Text style={styles.platformName}>{platform.name}</Text>
                  <Text style={styles.platformUsername}>{platform.username}</Text>
                </View>
              </View>
              <TouchableOpacity
                style={[
                  styles.connectionButton,
                  platform.connected && styles.connectedButton,
                ]}
                onPress={() => 
                  platform.connected 
                    ? handleDisconnectPlatform(platform.name)
                    : handleConnectPlatform(platform.name)
                }
              >
                <Text style={[
                  styles.connectionButtonText,
                  platform.connected && styles.connectedButtonText,
                ]}>
                  {platform.status}
                </Text>
              </TouchableOpacity>
            </View>
          ))}
        </View>

        {/* Ïï± ÏÑ§Ï†ï ÏÑπÏÖò */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Ïï± ÏÑ§Ï†ï</Text>
          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <View style={styles.settingHeader}>
                <Icon name="notifications-outline" size={20} color={colors.text.secondary} />
                <Text style={styles.settingLabel}>Ìë∏Ïãú ÏïåÎ¶º</Text>
              </View>
              <Text style={styles.settingDescription}>
                PostyÍ∞Ä Ï§ëÏöîÌïú ÏÜåÏãùÏùÑ ÏïåÎ†§ÎìúÎ†§Ïöî
              </Text>
            </View>
            <Switch
              value={pushEnabled}
              onValueChange={handlePushToggle}
              trackColor={{ false: colors.lightGray, true: colors.primary }}
              thumbColor={colors.white}
            />
          </View>
          
          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <View style={styles.settingHeader}>
                <Icon name="volume-high-outline" size={20} color={colors.text.secondary} />
                <Text style={styles.settingLabel}>ÏÇ¨Ïö¥Îìú Ìö®Í≥º</Text>
              </View>
              <Text style={styles.settingDescription}>
                Î≤ÑÌäº ÌÅ¥Î¶≠ Î∞è ÏïåÎ¶º ÏÜåÎ¶¨
              </Text>
            </View>
            <Switch
              value={soundEnabled}
              onValueChange={handleSoundToggle}
              trackColor={{ false: colors.lightGray, true: colors.primary }}
              thumbColor={colors.white}
            />
          </View>
          
          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <View style={styles.settingHeader}>
                <Icon name="phone-portrait-outline" size={20} color={colors.text.secondary} />
                <Text style={styles.settingLabel}>ÏßÑÎèô</Text>
              </View>
              <Text style={styles.settingDescription}>
                ÌÑ∞Ïπò Ïãú ÏßÑÎèô ÌîºÎìúÎ∞±
              </Text>
            </View>
            <Switch
              value={vibrationEnabled}
              onValueChange={handleVibrationToggle}
              trackColor={{ false: colors.lightGray, true: colors.primary }}
              thumbColor={colors.white}
            />
          </View>
          
          {/* ÏÇ¨Ïö¥Îìú ÌÖåÏä§Ìä∏ Î≤ÑÌäº */}
          <TouchableOpacity
            style={[styles.testButton, { backgroundColor: colors.primary + '20' }]}
            onPress={() => {
              soundManager.playSuccess();
              Alert.alert(
                'Posty',
                'ÌÖåÏä§Ìä∏ ÏÇ¨Ïö¥ÎìúÍ∞Ä Ïû¨ÏÉùÎêòÏóàÏäµÎãàÎã§! üîä',
                [{ text: 'ÌôïÏù∏' }]
              );
            }}
          >
            <Icon name="play-circle-outline" size={20} color={colors.primary} />
            <Text style={[styles.testButtonText, { color: colors.primary }]}>
              ÏÇ¨Ïö¥Îìú ÌÖåÏä§Ìä∏
            </Text>
          </TouchableOpacity>
          
          {/* Firebase ÌÖåÏä§Ìä∏ Î≤ÑÌäº (Í∞úÎ∞úÏö©) */}
          <TouchableOpacity
            style={[styles.testButton, { backgroundColor: '#F59E0B' + '20', marginTop: SPACING.xs }]}
            onPress={() => setShowFirebaseTest(true)}
          >
            <Icon name="flame-outline" size={20} color="#F59E0B" />
            <Text style={[styles.testButtonText, { color: '#F59E0B' }]}>
              Firebase ÌÜµÌï© ÌÖåÏä§Ìä∏
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.testButton, { backgroundColor: '#14B8A6' + '20', marginTop: SPACING.xs }]}
            onPress={async () => {
              await resetAllMissionData();
              await resetAdData();
              Alert.alert('Ï¥àÍ∏∞Ìôî ÏôÑÎ£å', 'ÎØ∏ÏÖò Î∞è Í¥ëÍ≥† Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
            }}
          >
            <Icon name="refresh-outline" size={20} color="#14B8A6" />
            <Text style={[styles.testButtonText, { color: '#14B8A6' }]}>
              ÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî (Í∞úÎ∞úÏö©)
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.testButton, { backgroundColor: '#EC4899' + '20', marginTop: SPACING.xs }]}
            onPress={async () => {
              await debugMissionData();
              Alert.alert('ÎîîÎ≤ÑÍ∑∏', 'ÏΩòÏÜîÏóêÏÑú ÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
            }}
          >
            <Icon name="bug-outline" size={20} color="#EC4899" />
            <Text style={[styles.testButtonText, { color: '#EC4899' }]}>
              ÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ (Í∞úÎ∞úÏö©)
            </Text>
          </TouchableOpacity>
          
          <View style={styles.themeSection}>
            <View style={styles.settingHeader}>
              <Icon name="color-palette-outline" size={20} color={colors.text.secondary} />
              <Text style={styles.settingLabel}>ÌÖåÎßà ÏÑ§Ï†ï</Text>
            </View>
            <View style={styles.themeButtonGroup}>
              <TouchableOpacity 
                style={[
                  styles.themeButton, 
                  themeMode === 'light' && styles.themeButtonActive
                ]} 
                onPress={() => handleThemeChange('light')}
              >
                <Text style={styles.themeIcon}>‚òÄÔ∏è</Text>
                <Text style={[
                  styles.themeButtonText,
                  themeMode === 'light' && styles.themeButtonTextActive
                ]}>ÎùºÏù¥Ìä∏</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[
                  styles.themeButton, 
                  themeMode === 'dark' && styles.themeButtonActive
                ]} 
                onPress={() => handleThemeChange('dark')}
              >
                <Text style={styles.themeIcon}>üåô</Text>
                <Text style={[
                  styles.themeButtonText,
                  themeMode === 'dark' && styles.themeButtonTextActive
                ]}>Îã§ÌÅ¨</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[
                  styles.themeButton, 
                  themeMode === 'system' && styles.themeButtonActive
                ]} 
                onPress={() => handleThemeChange('system')}
              >
                <Text style={styles.themeIcon}>üåì</Text>
                <Text style={[
                  styles.themeButtonText,
                  themeMode === 'system' && styles.themeButtonTextActive
                ]}>ÏãúÏä§ÌÖú</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>

        {/* Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ ÏÑπÏÖò */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨</Text>
          <TouchableOpacity
            style={styles.menuItem}
            onPress={handleClearHistory}
          >
            <View style={styles.menuItemLeft}>
              <Icon name="time-outline" size={20} color={colors.text.secondary} />
              <Text style={styles.menuItemLabel}>ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú</Text>
            </View>
            <Icon name="chevron-forward" size={20} color={colors.text.tertiary} />
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.menuItem, styles.dangerMenuItem]}
            onPress={handleDeleteAllData}
          >
            <View style={styles.menuItemLeft}>
              <Icon name="trash-outline" size={20} color="#EF4444" />
              <Text style={[styles.menuItemLabel, { color: '#EF4444' }]}>
                Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
              </Text>
            </View>
            <Icon name="chevron-forward" size={20} color="#EF4444" />
          </TouchableOpacity>
        </View>

        {/* Í∏∞ÌÉÄ Î©îÎâ¥ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>ÏßÄÏõê</Text>
          
          {/* Íµ¨ÎèÖ Î≥µÏõê Î≤ÑÌäº */}
          <TouchableOpacity
            style={styles.menuItem}
            onPress={handleRestorePurchases}
          >
            <View style={styles.menuItemLeft}>
              <Icon name="refresh-circle-outline" size={20} color={colors.text.secondary} />
              <Text style={styles.menuItemLabel}>Íµ¨ÎèÖ Î≥µÏõê</Text>
            </View>
            <Icon name="chevron-forward" size={20} color={colors.text.tertiary} />
          </TouchableOpacity>
          
          {menuItems.map((item, index) => (
            <TouchableOpacity
              key={index}
              style={styles.menuItem}
              onPress={item.onPress}
            >
              <View style={styles.menuItemLeft}>
                <Icon name={item.icon} size={20} color={colors.text.secondary} />
                <Text style={styles.menuItemLabel}>{item.label}</Text>
              </View>
              <Icon name="chevron-forward" size={20} color={colors.text.tertiary} />
            </TouchableOpacity>
          ))}
        </View>

        {/* Î≤ÑÏ†Ñ Ï†ïÎ≥¥ */}
        <View style={styles.versionSection}>
          <Text style={styles.versionText}>Posty v1.0.0</Text>
          <Text style={styles.copyrightText}>¬© 2024 Posty AI. Made with üíï</Text>
        </View>

        {/* Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº */}
        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
          <Icon name="log-out-outline" size={20} color="#EF4444" />
          <Text style={styles.logoutText}>Î°úÍ∑∏ÏïÑÏõÉ</Text>
        </TouchableOpacity>

        <View style={styles.bottomSpace} />
      </ScrollView>

      {/* ÌîÑÎ°úÌïÑ Ìé∏Ïßë Î™®Îã¨ */}
      <ProfileEditModal
        visible={profileEditVisible}
        onClose={() => setProfileEditVisible(false)}
        currentProfile={{ name: user.name, email: user.email, connectedPlatforms: user.connectedPlatforms }}
        onSave={handleSaveProfile}
      />
      

    </SafeAreaView>
  );
};

const createStyles = (colors: typeof COLORS, cardTheme: typeof CARD_THEME) => {
  const isDark = colors.background === '#1A202C';
  
  return StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  content: {
    flex: 1,
  },
  header: {
    paddingHorizontal: SPACING.lg,
    paddingTop: SPACING.xl,
    paddingBottom: SPACING.lg,
  },
  headerTop: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  mollyBadge: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.sm,
  },
  mollyBadgeText: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.white,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: colors.text.primary,
    letterSpacing: -0.5,
  },
  section: {
    backgroundColor: colors.surface,
    marginBottom: SPACING.md,
    paddingVertical: SPACING.md,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.text.tertiary,
    paddingHorizontal: SPACING.lg,
    marginBottom: SPACING.md,
  },
  profileCard: {
    paddingHorizontal: SPACING.lg,
  },
  profileHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: SPACING.lg,
  },
  profileInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  profileAvatar: {
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.md,
    overflow: 'hidden',
  },
  profileAvatarImage: {
    width: '100%',
    height: '100%',
  },
  profileAvatarText: {
    fontSize: 24,
    color: colors.white,
    fontWeight: 'bold',
  },
  profileDetails: {
    flex: 1,
  },
  profileName: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text.primary,
    marginBottom: 2,
  },
  profileEmail: {
    fontSize: 14,
    color: colors.text.tertiary,
    marginBottom: 6,
  },
  planBadgeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
    backgroundColor: colors.lightGray,
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  planBadgeText: {
    fontSize: 11,
    fontWeight: '600',
  },
  editButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: colors.lightGray,
    justifyContent: 'center',
    alignItems: 'center',
  },
  tokenStatusContainer: {
    backgroundColor: colors.lightGray,
    borderRadius: 12,
    padding: SPACING.md,
    marginBottom: SPACING.md,
  },
  tokenStatusHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  tokenStatusInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  tokenStatusLabel: {
    fontSize: 13,
    fontWeight: '500',
    color: colors.text.secondary,
  },
  tokenStatusCount: {
    fontSize: 16,
    fontWeight: '700',
    color: '#8B5CF6',
  },
  tokenProgressBar: {
    height: 6,
    backgroundColor: colors.border,
    borderRadius: 3,
    overflow: 'hidden',
  },
  tokenProgressFill: {
    height: '100%',
    backgroundColor: '#8B5CF6',
    borderRadius: 3,
  },
  miniStats: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: SPACING.sm,
  },
  miniStatItem: {
    flex: 1,
    alignItems: 'center',
  },
  miniStatValue: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.text.primary,
    marginBottom: 2,
  },
  miniStatLabel: {
    fontSize: 11,
    color: colors.text.tertiary,
  },
  miniStatDivider: {
    width: 1,
    height: 30,
    backgroundColor: colors.border,
  },
  upgradePrompt: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.primary + '10',
    borderRadius: 12,
    padding: SPACING.md,
    marginTop: SPACING.sm,
  },
  earnTokenPrompt: {
    backgroundColor: '#10B981' + '10',
    marginTop: SPACING.xs,
  },
  upgradePromptText: {
    flex: 1,
    fontSize: 13,
    color: colors.primary,
    fontWeight: '500',
    marginHorizontal: SPACING.sm,
  },
  platformItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
  },
  platformLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  platformIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.md,
  },
  platformIconText: {
    fontSize: 20,
    fontWeight: '700',
    color: colors.white,
  },
  platformInfo: {
    flex: 1,
  },
  platformName: {
    fontSize: 15,
    fontWeight: '500',
    color: colors.text.primary,
    marginBottom: 2,
  },
  platformUsername: {
    fontSize: FONT_SIZES.small,
    color: colors.text.tertiary,
  },
  connectionButton: {
    paddingHorizontal: SPACING.md,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: colors.primary,
  },
  connectedButton: {
    backgroundColor: colors.lightGray,
  },
  connectionButtonText: {
    fontSize: FONT_SIZES.small,
    fontWeight: '600',
    color: colors.white,
  },
  connectedButtonText: {
    color: colors.text.secondary,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
  },
  settingInfo: {
    flex: 1,
    marginRight: SPACING.md,
  },
  settingHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: SPACING.sm,
    marginBottom: 4,
  },
  settingLabel: {
    fontSize: 15,
    fontWeight: '500',
    color: colors.text.primary,
  },
  settingDescription: {
    fontSize: FONT_SIZES.small,
    color: colors.text.tertiary,
    marginLeft: 28,
  },
  themeSection: {
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
  },
  themeButtonGroup: {
    flexDirection: 'row',
    marginTop: SPACING.md,
    gap: SPACING.sm,
  },
  themeButton: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.sm,
    borderRadius: 12,
    backgroundColor: colors.lightGray,
    gap: 6,
  },
  themeButtonActive: {
    backgroundColor: cardTheme.molly.background,
    borderWidth: 2,
    borderColor: colors.primary,
  },
  themeIcon: {
    fontSize: 24,
  },
  themeButtonText: {
    fontSize: FONT_SIZES.small,
    fontWeight: '600',
    color: colors.text.secondary,
  },
  themeButtonTextActive: {
    color: colors.primary,
  },
  menuItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
  },
  dangerMenuItem: {
    backgroundColor: '#EF4444' + '10',
  },
  menuItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: SPACING.md,
  },
  menuItemLabel: {
    fontSize: 15,
    color: colors.text.primary,
  },
  versionSection: {
    alignItems: 'center',
    paddingVertical: SPACING.md,
  },
  versionText: {
    fontSize: FONT_SIZES.small,
    color: colors.text.tertiary,
    marginBottom: 4,
  },
  copyrightText: {
    fontSize: FONT_SIZES.small,
    color: colors.text.tertiary,
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: SPACING.sm,
    marginHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
    borderRadius: 12,
    backgroundColor: isDark ? colors.error + '20' : '#FEF2F2',
  },
  logoutText: {
    fontSize: 15,
    fontWeight: '500',
    color: '#EF4444',
  },
  bottomSpace: {
    height: SPACING.xxl,
  },
  testButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: SPACING.sm,
    marginHorizontal: SPACING.lg,
    marginTop: SPACING.sm,
    paddingVertical: SPACING.sm,
    borderRadius: 8,
  },
  testButtonText: {
    fontSize: 14,
    fontWeight: '500',
  },
  });
};

export default SettingsScreen;
