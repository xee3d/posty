import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  StyleSheet,
  StatusBar,
  Animated,
  Dimensions,
  ActivityIndicator,
} from 'react-native';
import { Provider } from 'react-redux';
import { store } from './src/store';

// Import screens
import HomeScreen from './src/screens/HomeScreen';
import AIWriteScreen from './src/screens/AIWriteScreen';
// import TrendScreen from './src/screens/TrendScreen'; // Ìä∏Î†åÎìú ÌÉ≠ Ï†úÍ±∞
import MyStyleScreen from './src/screens/MyStyleScreen';
import SettingsScreen from './src/screens/SettingsScreen';
import FeedWithAdsExample from './src/screens/FeedWithAdsExample';
import SubscriptionScreen from './src/screens/SubscriptionScreen';
import LoginScreen from './src/screens/LoginScreen';
import { TermsOfServiceScreen, PrivacyPolicyScreen } from './src/screens/documents';
import TabNavigator from './src/components/TabNavigator';

// Import constants and hooks
import { COLORS } from './src/utils/constants';
import { useAppTheme } from './src/hooks/useAppTheme';

// Import services
import adService from './src/services/adService';
import subscriptionService from './src/services/subscriptionService';
import soundManager from './src/utils/soundManager';
import socialAuthService from './src/services/auth/socialAuthService';
import inAppPurchaseService from './src/services/subscription/inAppPurchaseService';
import tokenService from './src/services/subscription/tokenService';

const { width } = Dimensions.get('window');

const App: React.FC = () => {
  const { colors, isDark } = useAppTheme();
  const [activeTab, setActiveTab] = useState('home');
  const [isAnimating, setIsAnimating] = useState(false);
  const [photoMode, setPhotoMode] = useState(false);
  const [navigationData, setNavigationData] = useState<any>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isCheckingAuth, setIsCheckingAuth] = useState(true);
  
  const fadeAnim = useRef(new Animated.Value(1)).current;
  const translateXAnim = useRef(new Animated.Value(0)).current;

  // Í¥ëÍ≥† Î∞è Íµ¨ÎèÖ ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑú Í≤ΩÍ≥† ÌôïÏù∏
    if (__DEV__) {
      console.log('üöÄ Posty App Started in Development Mode');
      console.log('React Native Version:', require('react-native/package.json').version);
    }

    const initializeServices = async () => {
      try {
        // Í∏∞Î≥∏ ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
        await adService.initialize();
        await subscriptionService.initialize();
        
        // ÌÜ†ÌÅ∞ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
        await tokenService.initialize();
        
        console.log('‚úÖ Services initialized successfully');
      } catch (error) {
        console.error('‚ùå Failed to initialize services:', error);
      }
    };
    
    initializeServices();
  }, []);

  // Ïù∏Ïï± Í≤∞Ï†ú Ï¥àÍ∏∞Ìôî (Î°úÍ∑∏Ïù∏ ÌõÑÏóêÎßå)
  useEffect(() => {
    if (isAuthenticated && !isCheckingAuth) {
      inAppPurchaseService.initialize().catch(console.error);
      
      return () => {
        inAppPurchaseService.disconnect();
      };
    }
  }, [isAuthenticated, isCheckingAuth]);

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
  useEffect(() => {
    const unsubscribe = socialAuthService.onAuthStateChanged((user) => {
      setIsAuthenticated(!!user);
      setIsCheckingAuth(false);
      
      // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎäî Î°úÍ∑∏Ïù∏ Í±¥ÎÑàÎõ∞Í∏∞ ÏòµÏÖò
      const SKIP_LOGIN = __DEV__ && true; // trueÎ°ú ÏÑ§Ï†ïÌïòÎ©¥ Î°úÍ∑∏Ïù∏ Í±¥ÎÑàÎõ∞Í∏∞
      
      // Î°úÍ∑∏Ïù∏Îêú Í≤ΩÏö∞ ÌôàÏúºÎ°ú, ÏïÑÎãàÎ©¥ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú
      if (!SKIP_LOGIN && !user && activeTab !== 'login') {
        setActiveTab('login');
      }
    });

    return unsubscribe;
  }, [activeTab]);

  const handleTabPress = (tab: string, data?: any) => {
    // console.log('handleTabPress called with:', { tab, data });
    if (isAnimating || (tab === activeTab && tab !== 'ai-write-photo')) return;
    
    // Ï†ÑÎã¨Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    setNavigationData(data);
    
    // ÏÇ¨ÏßÑ Î™®Îìú Ï≤òÎ¶¨
    if (tab === 'ai-write-photo') {
      setPhotoMode(true);
      tab = 'ai-write';
    } else {
      setPhotoMode(false);
    }
    
    setIsAnimating(true);
    
    const tabs = ['home', 'ai-write', 'my-style', 'settings'];
    const currentIndex = tabs.indexOf(activeTab);
    const nextIndex = tabs.indexOf(tab);
    const direction = nextIndex > currentIndex ? 1 : -1;
    
    // ÌòÑÏû¨ ÌôîÎ©¥ ÌéòÏù¥Îìú ÏïÑÏõÉ
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 100, // 150ÏóêÏÑú 100ÏúºÎ°ú Îã®Ï∂ï
        useNativeDriver: true,
      }),
      Animated.timing(translateXAnim, {
        toValue: -direction * 20, // 30ÏóêÏÑú 20ÏúºÎ°ú Í∞êÏÜå
        duration: 100,
        useNativeDriver: true,
      }),
    ]).start(() => {
      // ÌôîÎ©¥ Ï†ÑÌôò
      setActiveTab(tab);
      
      // ÏÉà ÌôîÎ©¥ Ï¥àÍ∏∞ ÏúÑÏπò ÏÑ§Ï†ï
      translateXAnim.setValue(direction * 20);
      
      // ÏÉà ÌôîÎ©¥ ÌéòÏù¥Îìú Ïù∏
      Animated.parallel([
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 150, // 200ÏóêÏÑú 150ÏúºÎ°ú Îã®Ï∂ï
          useNativeDriver: true,
        }),
        Animated.spring(translateXAnim, {
          toValue: 0,
          friction: 10, // 8ÏóêÏÑú 10ÏúºÎ°ú Ï¶ùÍ∞Ä (Îçî Îπ†Î•∏ Ï†ïÏßÄ)
          tension: 80, // 40ÏóêÏÑú 80ÏúºÎ°ú Ï¶ùÍ∞Ä (Îçî Îπ†Î•∏ Ïä§ÌîÑÎßÅ)
          useNativeDriver: true,
        }),
      ]).start(() => {
        setIsAnimating(false);
      });
    });
    
    // ÏÇ¨Ïö© ÌõÑ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî - Ïï†ÎãàÎ©îÏù¥ÏÖò ÏôÑÎ£å ÌõÑÏóêÎßå
    // setNavigationData(null); // Ï£ºÏÑù Ï≤òÎ¶¨ - Î∂àÌïÑÏöîÌïú Î¶¨Î†åÎçîÎßÅ Î∞©ÏßÄ
  };

  const renderScreen = () => {
    // Î°úÍ∑∏Ïù∏ ÌôïÏù∏ Ï§ë
    if (isCheckingAuth) {
      return (
        <View style={[styles.loadingContainer, { backgroundColor: colors.background }]}>
          <ActivityIndicator size="large" color={colors.primary} />
        </View>
      );
    }

    switch (activeTab) {
      case 'login':
        return <LoginScreen key="login" onNavigate={handleTabPress} />;
      case 'home':
        return <HomeScreen key="home" onNavigate={handleTabPress} />;
      case 'ai-write':
        return (
          <AIWriteScreen 
            key={`ai-write-${activeTab}`} 
            onNavigate={handleTabPress} 
            initialMode={navigationData?.initialMode || (photoMode ? 'photo' : 'text')} 
            initialText={navigationData?.content}
            initialHashtags={navigationData?.hashtags}
            initialTitle={navigationData?.title}
          />
        );
      // case 'trend':
      //   return <TrendScreen key="trend" onNavigate={handleTabPress} />;
      case 'my-style':
        return <MyStyleScreen key="my-style" onNavigate={handleTabPress} />;
      case 'settings':
        return <SettingsScreen key="settings" onNavigate={handleTabPress} />;
      case 'feed-ads':
        return <FeedWithAdsExample key="feed-ads" navigation={{ navigate: handleTabPress }} />;
      case 'subscription':
        return <SubscriptionScreen key="subscription" navigation={{ goBack: () => handleTabPress('home'), navigate: handleTabPress }} />;
      case 'terms':
        return <TermsOfServiceScreen key="terms" onNavigate={handleTabPress} />;
      case 'privacy':
        return <PrivacyPolicyScreen key="privacy" onNavigate={handleTabPress} />;
      default:
        return <HomeScreen key="home" onNavigate={handleTabPress} />;
    }
  };

  const styles = createStyles(colors);

  return (
    <Provider store={store}>
      <View style={styles.container}>
        <StatusBar 
          backgroundColor={colors.surface} 
          barStyle={isDark ? "light-content" : "dark-content"} 
        />
        <Animated.View 
          style={[
            styles.content,
            {
              opacity: fadeAnim,
              transform: [{ translateX: translateXAnim }],
            },
          ]}
        >
          {renderScreen()}
        </Animated.View>
        {activeTab !== 'login' && (
          <TabNavigator 
            activeTab={activeTab} 
            onTabPress={handleTabPress} 
          />
        )}
      </View>
    </Provider>
  );
};

const createStyles = (colors: typeof COLORS) => 
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    content: {
      flex: 1,
    },
    loadingContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
    },
  });

export default App;
