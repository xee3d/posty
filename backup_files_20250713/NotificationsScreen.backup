import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  RefreshControl,
  FlatList,
} from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import { COLORS, SPACING, BORDER_RADIUS, FONT_SIZES } from '../utils/constants';
import { useAppTheme } from '../hooks/useAppTheme';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface NotificationItem {
  id: string;
  type: 'like' | 'comment' | 'follow' | 'mention' | 'system';
  title: string;
  message: string;
  timestamp: Date;
  isRead: boolean;
  icon: string;
  iconColor: string;
  actionData?: any;
}

interface NotificationsScreenProps {
  onBack?: () => void;
  onNavigate?: (screen: string, data?: any) => void;
}

const NotificationsScreen: React.FC<NotificationsScreenProps> = ({ onBack, onNavigate }) => {
  const { colors } = useAppTheme();
  const [notifications, setNotifications] = useState<NotificationItem[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  const [filter, setFilter] = useState<'all' | 'unread'>('all');

  const styles = createStyles(colors);

  // 샘플 알림 데이터
  const sampleNotifications: NotificationItem[] = [
    {
      id: '1',
      type: 'like',
      title: '새로운 좋아요',
      message: '김포스티님이 회원님의 게시물을 좋아합니다.',
      timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30분 전
      isRead: false,
      icon: 'heart',
      iconColor: '#EF4444',
    },
    {
      id: '2',
      type: 'comment',
      title: '새로운 댓글',
      message: '이포스티님이 댓글을 남겼습니다: "정말 멋진 사진이네요!"',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2시간 전
      isRead: false,
      icon: 'chatbubble',
      iconColor: '#3B82F6',
    },
    {
      id: '3',
      type: 'system',
      title: 'Posty 업데이트',
      message: '새로운 기능이 추가되었어요! AI 글쓰기가 더 똑똑해졌어요.',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1일 전
      isRead: true,
      icon: 'megaphone',
      iconColor: '#8B5CF6',
    },
    {
      id: '4',
      type: 'mention',
      title: '멘션 알림',
      message: '박포스티님이 게시물에서 회원님을 언급했습니다.',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2), // 2일 전
      isRead: true,
      icon: 'at',
      iconColor: '#10B981',
    },
    {
      id: '5',
      type: 'follow',
      title: '새로운 팔로워',
      message: '최포스티님이 회원님을 팔로우하기 시작했습니다.',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3), // 3일 전
      isRead: true,
      icon: 'person-add',
      iconColor: '#F59E0B',
    },
  ];

  useEffect(() => {
    loadNotifications();
  }, []);

  const loadNotifications = async () => {
    try {
      const savedNotifications = await AsyncStorage.getItem('notifications');
      if (savedNotifications) {
        setNotifications(JSON.parse(savedNotifications));
      } else {
        setNotifications(sampleNotifications);
      }
    } catch (error) {
      setNotifications(sampleNotifications);
    }
  };

  const handleRefresh = async () => {
    setRefreshing(true);
    await loadNotifications();
    setRefreshing(false);
  };

  const markAsRead = async (id: string) => {
    const updatedNotifications = notifications.map(notif =>
      notif.id === id ? { ...notif, isRead: true } : notif
    );
    setNotifications(updatedNotifications);
    await AsyncStorage.setItem('notifications', JSON.stringify(updatedNotifications));
  };

  const markAllAsRead = async () => {
    const updatedNotifications = notifications.map(notif => ({ ...notif, isRead: true }));
    setNotifications(updatedNotifications);
    await AsyncStorage.setItem('notifications', JSON.stringify(updatedNotifications));
  };

  const clearAll = async () => {
    setNotifications([]);
    await AsyncStorage.removeItem('notifications');
  };

  const getTimeAgo = (timestamp: Date) => {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - timestamp.getTime()) / 1000);
    
    if (diffInSeconds < 60) return '방금 전';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}분 전`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}시간 전`;
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}일 전`;
    return timestamp.toLocaleDateString('ko-KR');
  };

  const filteredNotifications = filter === 'unread' 
    ? notifications.filter(n => !n.isRead)
    : notifications;

  const unreadCount = notifications.filter(n => !n.isRead).length;

  const renderNotification = ({ item }: { item: NotificationItem }) => (
    <TouchableOpacity
      style={[styles.notificationItem, !item.isRead && styles.unreadItem]}
      onPress={() => {
        markAsRead(item.id);
        // 알림 타입에 따라 적절한 화면으로 이동
        if (item.actionData && onNavigate) {
          onNavigate(item.actionData.screen, item.actionData.params);
        }
      }}
    >
      <View style={[styles.iconContainer, { backgroundColor: item.iconColor + '20' }]}>
        <Icon name={item.icon} size={24} color={item.iconColor} />
      </View>
      <View style={styles.contentContainer}>
        <Text style={styles.notificationTitle}>{item.title}</Text>
        <Text style={styles.notificationMessage} numberOfLines={2}>
          {item.message}
        </Text>
        <Text style={styles.timestamp}>{getTimeAgo(item.timestamp)}</Text>
      </View>
      {!item.isRead && <View style={styles.unreadDot} />}
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      {/* 헤더 */}
      <View style={styles.header}>
        <TouchableOpacity onPress={onBack} style={styles.backButton}>
          <Icon name="chevron-back" size={24} color={colors.text.primary} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>알림</Text>
        <TouchableOpacity onPress={markAllAsRead} style={styles.markAllButton}>
          <Text style={styles.markAllText}>모두 읽음</Text>
        </TouchableOpacity>
      </View>

      {/* 필터 탭 */}
      <View style={styles.filterContainer}>
        <TouchableOpacity
          style={[styles.filterTab, filter === 'all' && styles.filterTabActive]}
          onPress={() => setFilter('all')}
        >
          <Text style={[styles.filterText, filter === 'all' && styles.filterTextActive]}>
            전체
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.filterTab, filter === 'unread' && styles.filterTabActive]}
          onPress={() => setFilter('unread')}
        >
          <Text style={[styles.filterText, filter === 'unread' && styles.filterTextActive]}>
            읽지 않음 {unreadCount > 0 && `(${unreadCount})`}
          </Text>
        </TouchableOpacity>
      </View>

      {/* 알림 목록 */}
      {filteredNotifications.length > 0 ? (
        <FlatList
          data={filteredNotifications}
          renderItem={renderNotification}
          keyExtractor={(item) => item.id}
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
          }
          contentContainerStyle={styles.listContent}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Icon name="notifications-off-outline" size={48} color={colors.text.tertiary} />
          <Text style={styles.emptyText}>
            {filter === 'unread' ? '읽지 않은 알림이 없어요' : '알림이 없어요'}
          </Text>
        </View>
      )}

      {/* 전체 삭제 버튼 */}
      {notifications.length > 0 && (
        <TouchableOpacity style={styles.clearButton} onPress={clearAll}>
          <Text style={styles.clearButtonText}>알림 모두 지우기</Text>
        </TouchableOpacity>
      )}
    </SafeAreaView>
  );
};

const createStyles = (colors: typeof COLORS) => {
  const isDark = colors.background === '#1A202C';

  return StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    header: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: SPACING.md,
      paddingVertical: SPACING.md,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
    },
    backButton: {
      width: 40,
      height: 40,
      borderRadius: 20,
      justifyContent: 'center',
      alignItems: 'center',
    },
    headerTitle: {
      fontSize: 18,
      fontWeight: '600',
      color: colors.text.primary,
    },
    markAllButton: {
      paddingHorizontal: SPACING.md,
      paddingVertical: SPACING.xs,
    },
    markAllText: {
      fontSize: FONT_SIZES.small,
      color: colors.primary,
      fontWeight: '600',
    },
    filterContainer: {
      flexDirection: 'row',
      paddingHorizontal: SPACING.lg,
      paddingVertical: SPACING.sm,
      gap: SPACING.sm,
    },
    filterTab: {
      paddingVertical: SPACING.sm,
      paddingHorizontal: SPACING.md,
      borderRadius: BORDER_RADIUS.full,
      backgroundColor: colors.surface,
    },
    filterTabActive: {
      backgroundColor: colors.primary,
    },
    filterText: {
      fontSize: FONT_SIZES.small,
      fontWeight: '600',
      color: colors.text.secondary,
    },
    filterTextActive: {
      color: colors.white,
    },
    listContent: {
      paddingBottom: SPACING.xl,
    },
    notificationItem: {
      flexDirection: 'row',
      padding: SPACING.md,
      backgroundColor: colors.surface,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
    },
    unreadItem: {
      backgroundColor: isDark ? colors.primary + '10' : colors.primaryLight + '30',
    },
    iconContainer: {
      width: 48,
      height: 48,
      borderRadius: 24,
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: SPACING.md,
    },
    contentContainer: {
      flex: 1,
    },
    notificationTitle: {
      fontSize: FONT_SIZES.medium,
      fontWeight: '600',
      color: colors.text.primary,
      marginBottom: 4,
    },
    notificationMessage: {
      fontSize: FONT_SIZES.small,
      color: colors.text.secondary,
      lineHeight: 20,
      marginBottom: 4,
    },
    timestamp: {
      fontSize: FONT_SIZES.small,
      color: colors.text.tertiary,
    },
    unreadDot: {
      width: 8,
      height: 8,
      borderRadius: 4,
      backgroundColor: colors.primary,
      position: 'absolute',
      top: SPACING.md,
      right: SPACING.md,
    },
    emptyContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      paddingBottom: 100,
    },
    emptyText: {
      fontSize: FONT_SIZES.medium,
      color: colors.text.tertiary,
      marginTop: SPACING.md,
    },
    clearButton: {
      margin: SPACING.lg,
      padding: SPACING.md,
      backgroundColor: colors.error + '20',
      borderRadius: BORDER_RADIUS.md,
      alignItems: 'center',
    },
    clearButtonText: {
      fontSize: FONT_SIZES.small,
      color: colors.error,
      fontWeight: '600',
    },
  });
};

export default NotificationsScreen;
